/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 284.0, "minX": 0.0, "maxY": 4113.0, "series": [{"data": [[0.0, 290.0], [0.1, 290.0], [0.2, 290.0], [0.3, 290.0], [0.4, 291.0], [0.5, 291.0], [0.6, 291.0], [0.7, 294.0], [0.8, 294.0], [0.9, 294.0], [1.0, 294.0], [1.1, 294.0], [1.2, 294.0], [1.3, 294.0], [1.4, 295.0], [1.5, 295.0], [1.6, 295.0], [1.7, 295.0], [1.8, 295.0], [1.9, 295.0], [2.0, 296.0], [2.1, 296.0], [2.2, 296.0], [2.3, 296.0], [2.4, 297.0], [2.5, 297.0], [2.6, 297.0], [2.7, 300.0], [2.8, 300.0], [2.9, 300.0], [3.0, 300.0], [3.1, 300.0], [3.2, 300.0], [3.3, 300.0], [3.4, 301.0], [3.5, 301.0], [3.6, 301.0], [3.7, 302.0], [3.8, 302.0], [3.9, 302.0], [4.0, 303.0], [4.1, 303.0], [4.2, 303.0], [4.3, 303.0], [4.4, 303.0], [4.5, 303.0], [4.6, 303.0], [4.7, 304.0], [4.8, 304.0], [4.9, 304.0], [5.0, 304.0], [5.1, 304.0], [5.2, 304.0], [5.3, 304.0], [5.4, 304.0], [5.5, 304.0], [5.6, 304.0], [5.7, 304.0], [5.8, 304.0], [5.9, 304.0], [6.0, 304.0], [6.1, 304.0], [6.2, 304.0], [6.3, 304.0], [6.4, 304.0], [6.5, 304.0], [6.6, 304.0], [6.7, 305.0], [6.8, 305.0], [6.9, 305.0], [7.0, 305.0], [7.1, 305.0], [7.2, 305.0], [7.3, 305.0], [7.4, 305.0], [7.5, 305.0], [7.6, 305.0], [7.7, 305.0], [7.8, 305.0], [7.9, 305.0], [8.0, 305.0], [8.1, 305.0], [8.2, 305.0], [8.3, 305.0], [8.4, 305.0], [8.5, 305.0], [8.6, 305.0], [8.7, 305.0], [8.8, 305.0], [8.9, 305.0], [9.0, 306.0], [9.1, 306.0], [9.2, 306.0], [9.3, 306.0], [9.4, 306.0], [9.5, 306.0], [9.6, 306.0], [9.7, 306.0], [9.8, 306.0], [9.9, 306.0], [10.0, 306.0], [10.1, 306.0], [10.2, 306.0], [10.3, 306.0], [10.4, 306.0], [10.5, 306.0], [10.6, 306.0], [10.7, 307.0], [10.8, 307.0], [10.9, 307.0], [11.0, 307.0], [11.1, 307.0], [11.2, 307.0], [11.3, 307.0], [11.4, 307.0], [11.5, 307.0], [11.6, 307.0], [11.7, 307.0], [11.8, 307.0], [11.9, 307.0], [12.0, 307.0], [12.1, 307.0], [12.2, 307.0], [12.3, 307.0], [12.4, 307.0], [12.5, 307.0], [12.6, 307.0], [12.7, 308.0], [12.8, 308.0], [12.9, 308.0], [13.0, 308.0], [13.1, 308.0], [13.2, 308.0], [13.3, 308.0], [13.4, 309.0], [13.5, 309.0], [13.6, 309.0], [13.7, 309.0], [13.8, 309.0], [13.9, 309.0], [14.0, 310.0], [14.1, 310.0], [14.2, 310.0], [14.3, 310.0], [14.4, 310.0], [14.5, 310.0], [14.6, 310.0], [14.7, 311.0], [14.8, 311.0], [14.9, 311.0], [15.0, 312.0], [15.1, 312.0], [15.2, 312.0], [15.3, 312.0], [15.4, 314.0], [15.5, 314.0], [15.6, 314.0], [15.7, 315.0], [15.8, 315.0], [15.9, 315.0], [16.0, 318.0], [16.1, 318.0], [16.2, 318.0], [16.3, 318.0], [16.4, 321.0], [16.5, 321.0], [16.6, 321.0], [16.7, 324.0], [16.8, 324.0], [16.9, 324.0], [17.0, 324.0], [17.1, 324.0], [17.2, 324.0], [17.3, 324.0], [17.4, 325.0], [17.5, 325.0], [17.6, 325.0], [17.7, 327.0], [17.8, 327.0], [17.9, 327.0], [18.0, 329.0], [18.1, 329.0], [18.2, 329.0], [18.3, 329.0], [18.4, 331.0], [18.5, 331.0], [18.6, 331.0], [18.7, 332.0], [18.8, 332.0], [18.9, 332.0], [19.0, 334.0], [19.1, 334.0], [19.2, 334.0], [19.3, 334.0], [19.4, 337.0], [19.5, 337.0], [19.6, 337.0], [19.7, 339.0], [19.8, 339.0], [19.9, 339.0], [20.0, 341.0], [20.1, 341.0], [20.2, 341.0], [20.3, 341.0], [20.4, 341.0], [20.5, 341.0], [20.6, 341.0], [20.7, 341.0], [20.8, 341.0], [20.9, 341.0], [21.0, 342.0], [21.1, 342.0], [21.2, 342.0], [21.3, 342.0], [21.4, 344.0], [21.5, 344.0], [21.6, 344.0], [21.7, 346.0], [21.8, 346.0], [21.9, 346.0], [22.0, 347.0], [22.1, 347.0], [22.2, 347.0], [22.3, 347.0], [22.4, 349.0], [22.5, 349.0], [22.6, 349.0], [22.7, 351.0], [22.8, 351.0], [22.9, 351.0], [23.0, 352.0], [23.1, 352.0], [23.2, 352.0], [23.3, 352.0], [23.4, 407.0], [23.5, 407.0], [23.6, 407.0], [23.7, 422.0], [23.8, 422.0], [23.9, 422.0], [24.0, 423.0], [24.1, 423.0], [24.2, 423.0], [24.3, 423.0], [24.4, 426.0], [24.5, 426.0], [24.6, 426.0], [24.7, 435.0], [24.8, 435.0], [24.9, 435.0], [25.0, 463.0], [25.1, 463.0], [25.2, 463.0], [25.3, 463.0], [25.4, 467.0], [25.5, 467.0], [25.6, 467.0], [25.7, 469.0], [25.8, 469.0], [25.9, 469.0], [26.0, 475.0], [26.1, 475.0], [26.2, 475.0], [26.3, 475.0], [26.4, 475.0], [26.5, 475.0], [26.6, 475.0], [26.7, 477.0], [26.8, 477.0], [26.9, 477.0], [27.0, 478.0], [27.1, 478.0], [27.2, 478.0], [27.3, 478.0], [27.4, 491.0], [27.5, 491.0], [27.6, 491.0], [27.7, 491.0], [27.8, 491.0], [27.9, 491.0], [28.0, 500.0], [28.1, 500.0], [28.2, 500.0], [28.3, 500.0], [28.4, 502.0], [28.5, 502.0], [28.6, 502.0], [28.7, 504.0], [28.8, 504.0], [28.9, 504.0], [29.0, 507.0], [29.1, 507.0], [29.2, 507.0], [29.3, 507.0], [29.4, 510.0], [29.5, 510.0], [29.6, 510.0], [29.7, 511.0], [29.8, 511.0], [29.9, 511.0], [30.0, 513.0], [30.1, 513.0], [30.2, 513.0], [30.3, 513.0], [30.4, 517.0], [30.5, 517.0], [30.6, 517.0], [30.7, 517.0], [30.8, 517.0], [30.9, 517.0], [31.0, 519.0], [31.1, 519.0], [31.2, 519.0], [31.3, 519.0], [31.4, 519.0], [31.5, 519.0], [31.6, 519.0], [31.7, 520.0], [31.8, 520.0], [31.9, 520.0], [32.0, 526.0], [32.1, 526.0], [32.2, 526.0], [32.3, 526.0], [32.4, 527.0], [32.5, 527.0], [32.6, 527.0], [32.7, 528.0], [32.8, 528.0], [32.9, 528.0], [33.0, 528.0], [33.1, 528.0], [33.2, 528.0], [33.3, 528.0], [33.4, 529.0], [33.5, 529.0], [33.6, 529.0], [33.7, 531.0], [33.8, 531.0], [33.9, 531.0], [34.0, 531.0], [34.1, 531.0], [34.2, 531.0], [34.3, 531.0], [34.4, 532.0], [34.5, 532.0], [34.6, 532.0], [34.7, 532.0], [34.8, 532.0], [34.9, 532.0], [35.0, 534.0], [35.1, 534.0], [35.2, 534.0], [35.3, 534.0], [35.4, 534.0], [35.5, 534.0], [35.6, 534.0], [35.7, 535.0], [35.8, 535.0], [35.9, 535.0], [36.0, 536.0], [36.1, 536.0], [36.2, 536.0], [36.3, 536.0], [36.4, 536.0], [36.5, 536.0], [36.6, 536.0], [36.7, 537.0], [36.8, 537.0], [36.9, 537.0], [37.0, 538.0], [37.1, 538.0], [37.2, 538.0], [37.3, 538.0], [37.4, 538.0], [37.5, 538.0], [37.6, 538.0], [37.7, 539.0], [37.8, 539.0], [37.9, 539.0], [38.0, 541.0], [38.1, 541.0], [38.2, 541.0], [38.3, 541.0], [38.4, 542.0], [38.5, 542.0], [38.6, 542.0], [38.7, 542.0], [38.8, 542.0], [38.9, 542.0], [39.0, 542.0], [39.1, 542.0], [39.2, 542.0], [39.3, 542.0], [39.4, 542.0], [39.5, 542.0], [39.6, 542.0], [39.7, 543.0], [39.8, 543.0], [39.9, 543.0], [40.0, 543.0], [40.1, 543.0], [40.2, 543.0], [40.3, 543.0], [40.4, 544.0], [40.5, 544.0], [40.6, 544.0], [40.7, 544.0], [40.8, 544.0], [40.9, 544.0], [41.0, 544.0], [41.1, 544.0], [41.2, 544.0], [41.3, 544.0], [41.4, 544.0], [41.5, 544.0], [41.6, 544.0], [41.7, 544.0], [41.8, 544.0], [41.9, 544.0], [42.0, 545.0], [42.1, 545.0], [42.2, 545.0], [42.3, 545.0], [42.4, 545.0], [42.5, 545.0], [42.6, 545.0], [42.7, 545.0], [42.8, 545.0], [42.9, 545.0], [43.0, 545.0], [43.1, 545.0], [43.2, 545.0], [43.3, 545.0], [43.4, 545.0], [43.5, 545.0], [43.6, 545.0], [43.7, 546.0], [43.8, 546.0], [43.9, 546.0], [44.0, 546.0], [44.1, 546.0], [44.2, 546.0], [44.3, 546.0], [44.4, 546.0], [44.5, 546.0], [44.6, 546.0], [44.7, 547.0], [44.8, 547.0], [44.9, 547.0], [45.0, 547.0], [45.1, 547.0], [45.2, 547.0], [45.3, 547.0], [45.4, 548.0], [45.5, 548.0], [45.6, 548.0], [45.7, 548.0], [45.8, 548.0], [45.9, 548.0], [46.0, 548.0], [46.1, 548.0], [46.2, 548.0], [46.3, 548.0], [46.4, 549.0], [46.5, 549.0], [46.6, 549.0], [46.7, 549.0], [46.8, 549.0], [46.9, 549.0], [47.0, 549.0], [47.1, 549.0], [47.2, 549.0], [47.3, 549.0], [47.4, 550.0], [47.5, 550.0], [47.6, 550.0], [47.7, 550.0], [47.8, 550.0], [47.9, 550.0], [48.0, 551.0], [48.1, 551.0], [48.2, 551.0], [48.3, 551.0], [48.4, 552.0], [48.5, 552.0], [48.6, 552.0], [48.7, 552.0], [48.8, 552.0], [48.9, 552.0], [49.0, 552.0], [49.1, 552.0], [49.2, 552.0], [49.3, 552.0], [49.4, 552.0], [49.5, 552.0], [49.6, 552.0], [49.7, 553.0], [49.8, 553.0], [49.9, 553.0], [50.0, 553.0], [50.1, 553.0], [50.2, 553.0], [50.3, 553.0], [50.4, 553.0], [50.5, 553.0], [50.6, 553.0], [50.7, 553.0], [50.8, 553.0], [50.9, 553.0], [51.0, 553.0], [51.1, 553.0], [51.2, 553.0], [51.3, 553.0], [51.4, 555.0], [51.5, 555.0], [51.6, 555.0], [51.7, 555.0], [51.8, 555.0], [51.9, 555.0], [52.0, 555.0], [52.1, 555.0], [52.2, 555.0], [52.3, 555.0], [52.4, 557.0], [52.5, 557.0], [52.6, 557.0], [52.7, 557.0], [52.8, 557.0], [52.9, 557.0], [53.0, 558.0], [53.1, 558.0], [53.2, 558.0], [53.3, 558.0], [53.4, 558.0], [53.5, 558.0], [53.6, 558.0], [53.7, 559.0], [53.8, 559.0], [53.9, 559.0], [54.0, 559.0], [54.1, 559.0], [54.2, 559.0], [54.3, 559.0], [54.4, 560.0], [54.5, 560.0], [54.6, 560.0], [54.7, 560.0], [54.8, 560.0], [54.9, 560.0], [55.0, 561.0], [55.1, 561.0], [55.2, 561.0], [55.3, 561.0], [55.4, 563.0], [55.5, 563.0], [55.6, 563.0], [55.7, 563.0], [55.8, 563.0], [55.9, 563.0], [56.0, 563.0], [56.1, 563.0], [56.2, 563.0], [56.3, 563.0], [56.4, 564.0], [56.5, 564.0], [56.6, 564.0], [56.7, 567.0], [56.8, 567.0], [56.9, 567.0], [57.0, 567.0], [57.1, 567.0], [57.2, 567.0], [57.3, 567.0], [57.4, 568.0], [57.5, 568.0], [57.6, 568.0], [57.7, 568.0], [57.8, 568.0], [57.9, 568.0], [58.0, 568.0], [58.1, 568.0], [58.2, 568.0], [58.3, 568.0], [58.4, 568.0], [58.5, 568.0], [58.6, 568.0], [58.7, 569.0], [58.8, 569.0], [58.9, 569.0], [59.0, 569.0], [59.1, 569.0], [59.2, 569.0], [59.3, 569.0], [59.4, 569.0], [59.5, 569.0], [59.6, 569.0], [59.7, 569.0], [59.8, 569.0], [59.9, 569.0], [60.0, 570.0], [60.1, 570.0], [60.2, 570.0], [60.3, 570.0], [60.4, 570.0], [60.5, 570.0], [60.6, 570.0], [60.7, 570.0], [60.8, 570.0], [60.9, 570.0], [61.0, 570.0], [61.1, 570.0], [61.2, 570.0], [61.3, 570.0], [61.4, 571.0], [61.5, 571.0], [61.6, 571.0], [61.7, 572.0], [61.8, 572.0], [61.9, 572.0], [62.0, 572.0], [62.1, 572.0], [62.2, 572.0], [62.3, 572.0], [62.4, 573.0], [62.5, 573.0], [62.6, 573.0], [62.7, 574.0], [62.8, 574.0], [62.9, 574.0], [63.0, 574.0], [63.1, 574.0], [63.2, 574.0], [63.3, 574.0], [63.4, 575.0], [63.5, 575.0], [63.6, 575.0], [63.7, 576.0], [63.8, 576.0], [63.9, 576.0], [64.0, 576.0], [64.1, 576.0], [64.2, 576.0], [64.3, 576.0], [64.4, 577.0], [64.5, 577.0], [64.6, 577.0], [64.7, 578.0], [64.8, 578.0], [64.9, 578.0], [65.0, 580.0], [65.1, 580.0], [65.2, 580.0], [65.3, 580.0], [65.4, 582.0], [65.5, 582.0], [65.6, 582.0], [65.7, 582.0], [65.8, 582.0], [65.9, 582.0], [66.0, 582.0], [66.1, 582.0], [66.2, 582.0], [66.3, 582.0], [66.4, 582.0], [66.5, 582.0], [66.6, 582.0], [66.7, 582.0], [66.8, 582.0], [66.9, 582.0], [67.0, 583.0], [67.1, 583.0], [67.2, 583.0], [67.3, 583.0], [67.4, 583.0], [67.5, 583.0], [67.6, 583.0], [67.7, 586.0], [67.8, 586.0], [67.9, 586.0], [68.0, 587.0], [68.1, 587.0], [68.2, 587.0], [68.3, 587.0], [68.4, 589.0], [68.5, 589.0], [68.6, 589.0], [68.7, 590.0], [68.8, 590.0], [68.9, 590.0], [69.0, 590.0], [69.1, 590.0], [69.2, 590.0], [69.3, 590.0], [69.4, 591.0], [69.5, 591.0], [69.6, 591.0], [69.7, 591.0], [69.8, 591.0], [69.9, 591.0], [70.0, 591.0], [70.1, 591.0], [70.2, 591.0], [70.3, 591.0], [70.4, 591.0], [70.5, 591.0], [70.6, 591.0], [70.7, 593.0], [70.8, 593.0], [70.9, 593.0], [71.0, 593.0], [71.1, 593.0], [71.2, 593.0], [71.3, 593.0], [71.4, 595.0], [71.5, 595.0], [71.6, 595.0], [71.7, 595.0], [71.8, 595.0], [71.9, 595.0], [72.0, 596.0], [72.1, 596.0], [72.2, 596.0], [72.3, 596.0], [72.4, 596.0], [72.5, 596.0], [72.6, 596.0], [72.7, 597.0], [72.8, 597.0], [72.9, 597.0], [73.0, 600.0], [73.1, 600.0], [73.2, 600.0], [73.3, 600.0], [73.4, 601.0], [73.5, 601.0], [73.6, 601.0], [73.7, 603.0], [73.8, 603.0], [73.9, 603.0], [74.0, 604.0], [74.1, 604.0], [74.2, 604.0], [74.3, 604.0], [74.4, 605.0], [74.5, 605.0], [74.6, 605.0], [74.7, 607.0], [74.8, 607.0], [74.9, 607.0], [75.0, 607.0], [75.1, 607.0], [75.2, 607.0], [75.3, 607.0], [75.4, 610.0], [75.5, 610.0], [75.6, 610.0], [75.7, 616.0], [75.8, 616.0], [75.9, 616.0], [76.0, 616.0], [76.1, 616.0], [76.2, 616.0], [76.3, 616.0], [76.4, 617.0], [76.5, 617.0], [76.6, 617.0], [76.7, 617.0], [76.8, 617.0], [76.9, 617.0], [77.0, 620.0], [77.1, 620.0], [77.2, 620.0], [77.3, 620.0], [77.4, 620.0], [77.5, 620.0], [77.6, 620.0], [77.7, 620.0], [77.8, 620.0], [77.9, 620.0], [78.0, 621.0], [78.1, 621.0], [78.2, 621.0], [78.3, 621.0], [78.4, 622.0], [78.5, 622.0], [78.6, 622.0], [78.7, 624.0], [78.8, 624.0], [78.9, 624.0], [79.0, 625.0], [79.1, 625.0], [79.2, 625.0], [79.3, 625.0], [79.4, 626.0], [79.5, 626.0], [79.6, 626.0], [79.7, 628.0], [79.8, 628.0], [79.9, 628.0], [80.0, 631.0], [80.1, 631.0], [80.2, 631.0], [80.3, 631.0], [80.4, 632.0], [80.5, 632.0], [80.6, 632.0], [80.7, 633.0], [80.8, 633.0], [80.9, 633.0], [81.0, 634.0], [81.1, 634.0], [81.2, 634.0], [81.3, 634.0], [81.4, 638.0], [81.5, 638.0], [81.6, 638.0], [81.7, 641.0], [81.8, 641.0], [81.9, 641.0], [82.0, 641.0], [82.1, 641.0], [82.2, 641.0], [82.3, 641.0], [82.4, 642.0], [82.5, 642.0], [82.6, 642.0], [82.7, 644.0], [82.8, 644.0], [82.9, 644.0], [83.0, 645.0], [83.1, 645.0], [83.2, 645.0], [83.3, 645.0], [83.4, 645.0], [83.5, 645.0], [83.6, 645.0], [83.7, 646.0], [83.8, 646.0], [83.9, 646.0], [84.0, 656.0], [84.1, 656.0], [84.2, 656.0], [84.3, 656.0], [84.4, 657.0], [84.5, 657.0], [84.6, 657.0], [84.7, 660.0], [84.8, 660.0], [84.9, 660.0], [85.0, 663.0], [85.1, 663.0], [85.2, 663.0], [85.3, 663.0], [85.4, 664.0], [85.5, 664.0], [85.6, 664.0], [85.7, 665.0], [85.8, 665.0], [85.9, 665.0], [86.0, 665.0], [86.1, 665.0], [86.2, 665.0], [86.3, 665.0], [86.4, 665.0], [86.5, 665.0], [86.6, 665.0], [86.7, 670.0], [86.8, 670.0], [86.9, 670.0], [87.0, 672.0], [87.1, 672.0], [87.2, 672.0], [87.3, 672.0], [87.4, 672.0], [87.5, 672.0], [87.6, 672.0], [87.7, 675.0], [87.8, 675.0], [87.9, 675.0], [88.0, 678.0], [88.1, 678.0], [88.2, 678.0], [88.3, 678.0], [88.4, 678.0], [88.5, 678.0], [88.6, 678.0], [88.7, 680.0], [88.8, 680.0], [88.9, 680.0], [89.0, 681.0], [89.1, 681.0], [89.2, 681.0], [89.3, 681.0], [89.4, 682.0], [89.5, 682.0], [89.6, 682.0], [89.7, 686.0], [89.8, 686.0], [89.9, 686.0], [90.0, 687.0], [90.1, 687.0], [90.2, 687.0], [90.3, 687.0], [90.4, 688.0], [90.5, 688.0], [90.6, 688.0], [90.7, 689.0], [90.8, 689.0], [90.9, 689.0], [91.0, 695.0], [91.1, 695.0], [91.2, 695.0], [91.3, 695.0], [91.4, 696.0], [91.5, 696.0], [91.6, 696.0], [91.7, 697.0], [91.8, 697.0], [91.9, 697.0], [92.0, 702.0], [92.1, 702.0], [92.2, 702.0], [92.3, 702.0], [92.4, 703.0], [92.5, 703.0], [92.6, 703.0], [92.7, 704.0], [92.8, 704.0], [92.9, 704.0], [93.0, 705.0], [93.1, 705.0], [93.2, 705.0], [93.3, 705.0], [93.4, 706.0], [93.5, 706.0], [93.6, 706.0], [93.7, 709.0], [93.8, 709.0], [93.9, 709.0], [94.0, 710.0], [94.1, 710.0], [94.2, 710.0], [94.3, 710.0], [94.4, 710.0], [94.5, 710.0], [94.6, 710.0], [94.7, 711.0], [94.8, 711.0], [94.9, 711.0], [95.0, 724.0], [95.1, 724.0], [95.2, 724.0], [95.3, 724.0], [95.4, 784.0], [95.5, 784.0], [95.6, 784.0], [95.7, 785.0], [95.8, 785.0], [95.9, 785.0], [96.0, 788.0], [96.1, 788.0], [96.2, 788.0], [96.3, 788.0], [96.4, 790.0], [96.5, 790.0], [96.6, 790.0], [96.7, 791.0], [96.8, 791.0], [96.9, 791.0], [97.0, 795.0], [97.1, 795.0], [97.2, 795.0], [97.3, 795.0], [97.4, 799.0], [97.5, 799.0], [97.6, 799.0], [97.7, 803.0], [97.8, 803.0], [97.9, 803.0], [98.0, 804.0], [98.1, 804.0], [98.2, 804.0], [98.3, 804.0], [98.4, 805.0], [98.5, 805.0], [98.6, 805.0], [98.7, 806.0], [98.8, 806.0], [98.9, 806.0], [99.0, 814.0], [99.1, 814.0], [99.2, 814.0], [99.3, 814.0], [99.4, 1005.0], [99.5, 1005.0], [99.6, 1005.0], [99.7, 1461.0], [99.8, 1461.0], [99.9, 1461.0]], "isOverall": false, "label": "create  bookingRequest", "isController": false}, {"data": [[0.0, 284.0], [0.1, 284.0], [0.2, 284.0], [0.3, 284.0], [0.4, 292.0], [0.5, 292.0], [0.6, 292.0], [0.7, 294.0], [0.8, 294.0], [0.9, 294.0], [1.0, 296.0], [1.1, 296.0], [1.2, 296.0], [1.3, 296.0], [1.4, 298.0], [1.5, 298.0], [1.6, 298.0], [1.7, 299.0], [1.8, 299.0], [1.9, 299.0], [2.0, 300.0], [2.1, 300.0], [2.2, 300.0], [2.3, 300.0], [2.4, 300.0], [2.5, 300.0], [2.6, 300.0], [2.7, 300.0], [2.8, 300.0], [2.9, 300.0], [3.0, 301.0], [3.1, 301.0], [3.2, 301.0], [3.3, 301.0], [3.4, 302.0], [3.5, 302.0], [3.6, 302.0], [3.7, 305.0], [3.8, 305.0], [3.9, 305.0], [4.0, 305.0], [4.1, 305.0], [4.2, 305.0], [4.3, 305.0], [4.4, 316.0], [4.5, 316.0], [4.6, 316.0], [4.7, 316.0], [4.8, 316.0], [4.9, 316.0], [5.0, 316.0], [5.1, 319.0], [5.2, 319.0], [5.3, 319.0], [5.4, 320.0], [5.5, 320.0], [5.6, 320.0], [5.7, 325.0], [5.8, 325.0], [5.9, 325.0], [6.0, 326.0], [6.1, 326.0], [6.2, 326.0], [6.3, 326.0], [6.4, 326.0], [6.5, 326.0], [6.6, 326.0], [6.7, 328.0], [6.8, 328.0], [6.9, 328.0], [7.0, 329.0], [7.1, 329.0], [7.2, 329.0], [7.3, 329.0], [7.4, 330.0], [7.5, 330.0], [7.6, 330.0], [7.7, 333.0], [7.8, 333.0], [7.9, 333.0], [8.0, 334.0], [8.1, 334.0], [8.2, 334.0], [8.3, 334.0], [8.4, 337.0], [8.5, 337.0], [8.6, 337.0], [8.7, 341.0], [8.8, 341.0], [8.9, 341.0], [9.0, 341.0], [9.1, 341.0], [9.2, 341.0], [9.3, 341.0], [9.4, 342.0], [9.5, 342.0], [9.6, 342.0], [9.7, 342.0], [9.8, 342.0], [9.9, 342.0], [10.0, 342.0], [10.1, 342.0], [10.2, 342.0], [10.3, 342.0], [10.4, 343.0], [10.5, 343.0], [10.6, 343.0], [10.7, 343.0], [10.8, 343.0], [10.9, 343.0], [11.0, 346.0], [11.1, 346.0], [11.2, 346.0], [11.3, 346.0], [11.4, 347.0], [11.5, 347.0], [11.6, 347.0], [11.7, 348.0], [11.8, 348.0], [11.9, 348.0], [12.0, 349.0], [12.1, 349.0], [12.2, 349.0], [12.3, 349.0], [12.4, 349.0], [12.5, 349.0], [12.6, 349.0], [12.7, 351.0], [12.8, 351.0], [12.9, 351.0], [13.0, 351.0], [13.1, 351.0], [13.2, 351.0], [13.3, 351.0], [13.4, 353.0], [13.5, 353.0], [13.6, 353.0], [13.7, 355.0], [13.8, 355.0], [13.9, 355.0], [14.0, 355.0], [14.1, 355.0], [14.2, 355.0], [14.3, 355.0], [14.4, 356.0], [14.5, 356.0], [14.6, 356.0], [14.7, 356.0], [14.8, 356.0], [14.9, 356.0], [15.0, 356.0], [15.1, 356.0], [15.2, 356.0], [15.3, 356.0], [15.4, 360.0], [15.5, 360.0], [15.6, 360.0], [15.7, 392.0], [15.8, 392.0], [15.9, 392.0], [16.0, 403.0], [16.1, 403.0], [16.2, 403.0], [16.3, 403.0], [16.4, 405.0], [16.5, 405.0], [16.6, 405.0], [16.7, 407.0], [16.8, 407.0], [16.9, 407.0], [17.0, 409.0], [17.1, 409.0], [17.2, 409.0], [17.3, 409.0], [17.4, 416.0], [17.5, 416.0], [17.6, 416.0], [17.7, 422.0], [17.8, 422.0], [17.9, 422.0], [18.0, 424.0], [18.1, 424.0], [18.2, 424.0], [18.3, 424.0], [18.4, 427.0], [18.5, 427.0], [18.6, 427.0], [18.7, 428.0], [18.8, 428.0], [18.9, 428.0], [19.0, 429.0], [19.1, 429.0], [19.2, 429.0], [19.3, 429.0], [19.4, 430.0], [19.5, 430.0], [19.6, 430.0], [19.7, 430.0], [19.8, 430.0], [19.9, 430.0], [20.0, 431.0], [20.1, 431.0], [20.2, 431.0], [20.3, 431.0], [20.4, 432.0], [20.5, 432.0], [20.6, 432.0], [20.7, 435.0], [20.8, 435.0], [20.9, 435.0], [21.0, 441.0], [21.1, 441.0], [21.2, 441.0], [21.3, 441.0], [21.4, 442.0], [21.5, 442.0], [21.6, 442.0], [21.7, 445.0], [21.8, 445.0], [21.9, 445.0], [22.0, 454.0], [22.1, 454.0], [22.2, 454.0], [22.3, 454.0], [22.4, 455.0], [22.5, 455.0], [22.6, 455.0], [22.7, 457.0], [22.8, 457.0], [22.9, 457.0], [23.0, 459.0], [23.1, 459.0], [23.2, 459.0], [23.3, 459.0], [23.4, 459.0], [23.5, 459.0], [23.6, 459.0], [23.7, 459.0], [23.8, 459.0], [23.9, 459.0], [24.0, 459.0], [24.1, 459.0], [24.2, 459.0], [24.3, 459.0], [24.4, 460.0], [24.5, 460.0], [24.6, 460.0], [24.7, 460.0], [24.8, 460.0], [24.9, 460.0], [25.0, 460.0], [25.1, 460.0], [25.2, 460.0], [25.3, 460.0], [25.4, 460.0], [25.5, 460.0], [25.6, 460.0], [25.7, 461.0], [25.8, 461.0], [25.9, 461.0], [26.0, 462.0], [26.1, 462.0], [26.2, 462.0], [26.3, 462.0], [26.4, 463.0], [26.5, 463.0], [26.6, 463.0], [26.7, 463.0], [26.8, 463.0], [26.9, 463.0], [27.0, 467.0], [27.1, 467.0], [27.2, 467.0], [27.3, 467.0], [27.4, 470.0], [27.5, 470.0], [27.6, 470.0], [27.7, 471.0], [27.8, 471.0], [27.9, 471.0], [28.0, 532.0], [28.1, 532.0], [28.2, 532.0], [28.3, 532.0], [28.4, 532.0], [28.5, 532.0], [28.6, 532.0], [28.7, 534.0], [28.8, 534.0], [28.9, 534.0], [29.0, 535.0], [29.1, 535.0], [29.2, 535.0], [29.3, 535.0], [29.4, 535.0], [29.5, 535.0], [29.6, 535.0], [29.7, 536.0], [29.8, 536.0], [29.9, 536.0], [30.0, 536.0], [30.1, 536.0], [30.2, 536.0], [30.3, 536.0], [30.4, 536.0], [30.5, 536.0], [30.6, 536.0], [30.7, 537.0], [30.8, 537.0], [30.9, 537.0], [31.0, 537.0], [31.1, 537.0], [31.2, 537.0], [31.3, 537.0], [31.4, 538.0], [31.5, 538.0], [31.6, 538.0], [31.7, 539.0], [31.8, 539.0], [31.9, 539.0], [32.0, 539.0], [32.1, 539.0], [32.2, 539.0], [32.3, 539.0], [32.4, 540.0], [32.5, 540.0], [32.6, 540.0], [32.7, 542.0], [32.8, 542.0], [32.9, 542.0], [33.0, 543.0], [33.1, 543.0], [33.2, 543.0], [33.3, 543.0], [33.4, 543.0], [33.5, 543.0], [33.6, 543.0], [33.7, 544.0], [33.8, 544.0], [33.9, 544.0], [34.0, 544.0], [34.1, 544.0], [34.2, 544.0], [34.3, 544.0], [34.4, 545.0], [34.5, 545.0], [34.6, 545.0], [34.7, 546.0], [34.8, 546.0], [34.9, 546.0], [35.0, 546.0], [35.1, 546.0], [35.2, 546.0], [35.3, 546.0], [35.4, 547.0], [35.5, 547.0], [35.6, 547.0], [35.7, 556.0], [35.8, 556.0], [35.9, 556.0], [36.0, 568.0], [36.1, 568.0], [36.2, 568.0], [36.3, 568.0], [36.4, 574.0], [36.5, 574.0], [36.6, 574.0], [36.7, 576.0], [36.8, 576.0], [36.9, 576.0], [37.0, 583.0], [37.1, 583.0], [37.2, 583.0], [37.3, 583.0], [37.4, 584.0], [37.5, 584.0], [37.6, 584.0], [37.7, 584.0], [37.8, 584.0], [37.9, 584.0], [38.0, 585.0], [38.1, 585.0], [38.2, 585.0], [38.3, 585.0], [38.4, 593.0], [38.5, 593.0], [38.6, 593.0], [38.7, 597.0], [38.8, 597.0], [38.9, 597.0], [39.0, 602.0], [39.1, 602.0], [39.2, 602.0], [39.3, 602.0], [39.4, 604.0], [39.5, 604.0], [39.6, 604.0], [39.7, 606.0], [39.8, 606.0], [39.9, 606.0], [40.0, 618.0], [40.1, 618.0], [40.2, 618.0], [40.3, 618.0], [40.4, 623.0], [40.5, 623.0], [40.6, 623.0], [40.7, 624.0], [40.8, 624.0], [40.9, 624.0], [41.0, 624.0], [41.1, 626.0], [41.2, 626.0], [41.3, 626.0], [41.4, 626.0], [41.5, 626.0], [41.6, 626.0], [41.7, 630.0], [41.8, 630.0], [41.9, 630.0], [42.0, 630.0], [42.1, 631.0], [42.2, 631.0], [42.3, 631.0], [42.4, 631.0], [42.5, 631.0], [42.6, 631.0], [42.7, 633.0], [42.8, 633.0], [42.9, 633.0], [43.0, 633.0], [43.1, 634.0], [43.2, 634.0], [43.3, 634.0], [43.4, 637.0], [43.5, 637.0], [43.6, 637.0], [43.7, 638.0], [43.8, 638.0], [43.9, 638.0], [44.0, 638.0], [44.1, 652.0], [44.2, 652.0], [44.3, 652.0], [44.4, 652.0], [44.5, 652.0], [44.6, 652.0], [44.7, 660.0], [44.8, 660.0], [44.9, 660.0], [45.0, 660.0], [45.1, 660.0], [45.2, 660.0], [45.3, 660.0], [45.4, 662.0], [45.5, 662.0], [45.6, 662.0], [45.7, 667.0], [45.8, 667.0], [45.9, 667.0], [46.0, 667.0], [46.1, 668.0], [46.2, 668.0], [46.3, 668.0], [46.4, 668.0], [46.5, 668.0], [46.6, 668.0], [46.7, 670.0], [46.8, 670.0], [46.9, 670.0], [47.0, 670.0], [47.1, 672.0], [47.2, 672.0], [47.3, 672.0], [47.4, 673.0], [47.5, 673.0], [47.6, 673.0], [47.7, 673.0], [47.8, 673.0], [47.9, 673.0], [48.0, 673.0], [48.1, 674.0], [48.2, 674.0], [48.3, 674.0], [48.4, 682.0], [48.5, 682.0], [48.6, 682.0], [48.7, 687.0], [48.8, 687.0], [48.9, 687.0], [49.0, 687.0], [49.1, 688.0], [49.2, 688.0], [49.3, 688.0], [49.4, 690.0], [49.5, 690.0], [49.6, 690.0], [49.7, 693.0], [49.8, 693.0], [49.9, 693.0], [50.0, 693.0], [50.1, 694.0], [50.2, 694.0], [50.3, 694.0], [50.4, 695.0], [50.5, 695.0], [50.6, 695.0], [50.7, 696.0], [50.8, 696.0], [50.9, 696.0], [51.0, 696.0], [51.1, 697.0], [51.2, 697.0], [51.3, 697.0], [51.4, 697.0], [51.5, 697.0], [51.6, 697.0], [51.7, 697.0], [51.8, 697.0], [51.9, 697.0], [52.0, 697.0], [52.1, 699.0], [52.2, 699.0], [52.3, 699.0], [52.4, 701.0], [52.5, 701.0], [52.6, 701.0], [52.7, 702.0], [52.8, 702.0], [52.9, 702.0], [53.0, 702.0], [53.1, 702.0], [53.2, 702.0], [53.3, 702.0], [53.4, 702.0], [53.5, 702.0], [53.6, 702.0], [53.7, 702.0], [53.8, 702.0], [53.9, 702.0], [54.0, 702.0], [54.1, 703.0], [54.2, 703.0], [54.3, 703.0], [54.4, 704.0], [54.5, 704.0], [54.6, 704.0], [54.7, 705.0], [54.8, 705.0], [54.9, 705.0], [55.0, 705.0], [55.1, 705.0], [55.2, 705.0], [55.3, 705.0], [55.4, 706.0], [55.5, 706.0], [55.6, 706.0], [55.7, 706.0], [55.8, 706.0], [55.9, 706.0], [56.0, 706.0], [56.1, 707.0], [56.2, 707.0], [56.3, 707.0], [56.4, 707.0], [56.5, 707.0], [56.6, 707.0], [56.7, 709.0], [56.8, 709.0], [56.9, 709.0], [57.0, 709.0], [57.1, 709.0], [57.2, 709.0], [57.3, 709.0], [57.4, 710.0], [57.5, 710.0], [57.6, 710.0], [57.7, 712.0], [57.8, 712.0], [57.9, 712.0], [58.0, 712.0], [58.1, 712.0], [58.2, 712.0], [58.3, 712.0], [58.4, 713.0], [58.5, 713.0], [58.6, 713.0], [58.7, 713.0], [58.8, 713.0], [58.9, 713.0], [59.0, 713.0], [59.1, 715.0], [59.2, 715.0], [59.3, 715.0], [59.4, 732.0], [59.5, 732.0], [59.6, 732.0], [59.7, 738.0], [59.8, 738.0], [59.9, 738.0], [60.0, 738.0], [60.1, 742.0], [60.2, 742.0], [60.3, 742.0], [60.4, 742.0], [60.5, 742.0], [60.6, 742.0], [60.7, 743.0], [60.8, 743.0], [60.9, 743.0], [61.0, 743.0], [61.1, 745.0], [61.2, 745.0], [61.3, 745.0], [61.4, 747.0], [61.5, 747.0], [61.6, 747.0], [61.7, 748.0], [61.8, 748.0], [61.9, 748.0], [62.0, 748.0], [62.1, 751.0], [62.2, 751.0], [62.3, 751.0], [62.4, 752.0], [62.5, 752.0], [62.6, 752.0], [62.7, 753.0], [62.8, 753.0], [62.9, 753.0], [63.0, 753.0], [63.1, 753.0], [63.2, 753.0], [63.3, 753.0], [63.4, 753.0], [63.5, 753.0], [63.6, 753.0], [63.7, 754.0], [63.8, 754.0], [63.9, 754.0], [64.0, 754.0], [64.1, 754.0], [64.2, 754.0], [64.3, 754.0], [64.4, 755.0], [64.5, 755.0], [64.6, 755.0], [64.7, 756.0], [64.8, 756.0], [64.9, 756.0], [65.0, 756.0], [65.1, 756.0], [65.2, 756.0], [65.3, 756.0], [65.4, 757.0], [65.5, 757.0], [65.6, 757.0], [65.7, 758.0], [65.8, 758.0], [65.9, 758.0], [66.0, 758.0], [66.1, 758.0], [66.2, 758.0], [66.3, 758.0], [66.4, 759.0], [66.5, 759.0], [66.6, 759.0], [66.7, 760.0], [66.8, 760.0], [66.9, 760.0], [67.0, 760.0], [67.1, 760.0], [67.2, 760.0], [67.3, 760.0], [67.4, 761.0], [67.5, 761.0], [67.6, 761.0], [67.7, 763.0], [67.8, 763.0], [67.9, 763.0], [68.0, 763.0], [68.1, 763.0], [68.2, 763.0], [68.3, 763.0], [68.4, 763.0], [68.5, 763.0], [68.6, 763.0], [68.7, 764.0], [68.8, 764.0], [68.9, 764.0], [69.0, 764.0], [69.1, 764.0], [69.2, 764.0], [69.3, 764.0], [69.4, 764.0], [69.5, 764.0], [69.6, 764.0], [69.7, 765.0], [69.8, 765.0], [69.9, 765.0], [70.0, 765.0], [70.1, 766.0], [70.2, 766.0], [70.3, 766.0], [70.4, 766.0], [70.5, 766.0], [70.6, 766.0], [70.7, 767.0], [70.8, 767.0], [70.9, 767.0], [71.0, 767.0], [71.1, 768.0], [71.2, 768.0], [71.3, 768.0], [71.4, 768.0], [71.5, 768.0], [71.6, 768.0], [71.7, 769.0], [71.8, 769.0], [71.9, 769.0], [72.0, 769.0], [72.1, 769.0], [72.2, 769.0], [72.3, 769.0], [72.4, 769.0], [72.5, 769.0], [72.6, 769.0], [72.7, 769.0], [72.8, 769.0], [72.9, 769.0], [73.0, 769.0], [73.1, 770.0], [73.2, 770.0], [73.3, 770.0], [73.4, 770.0], [73.5, 770.0], [73.6, 770.0], [73.7, 770.0], [73.8, 770.0], [73.9, 770.0], [74.0, 770.0], [74.1, 771.0], [74.2, 771.0], [74.3, 771.0], [74.4, 771.0], [74.5, 771.0], [74.6, 771.0], [74.7, 772.0], [74.8, 772.0], [74.9, 772.0], [75.0, 772.0], [75.1, 772.0], [75.2, 772.0], [75.3, 772.0], [75.4, 772.0], [75.5, 772.0], [75.6, 772.0], [75.7, 773.0], [75.8, 773.0], [75.9, 773.0], [76.0, 773.0], [76.1, 773.0], [76.2, 773.0], [76.3, 773.0], [76.4, 773.0], [76.5, 773.0], [76.6, 773.0], [76.7, 773.0], [76.8, 773.0], [76.9, 773.0], [77.0, 773.0], [77.1, 773.0], [77.2, 773.0], [77.3, 773.0], [77.4, 773.0], [77.5, 773.0], [77.6, 773.0], [77.7, 774.0], [77.8, 774.0], [77.9, 774.0], [78.0, 774.0], [78.1, 774.0], [78.2, 774.0], [78.3, 774.0], [78.4, 774.0], [78.5, 774.0], [78.6, 774.0], [78.7, 774.0], [78.8, 774.0], [78.9, 774.0], [79.0, 774.0], [79.1, 775.0], [79.2, 775.0], [79.3, 775.0], [79.4, 775.0], [79.5, 775.0], [79.6, 775.0], [79.7, 776.0], [79.8, 776.0], [79.9, 776.0], [80.0, 776.0], [80.1, 777.0], [80.2, 777.0], [80.3, 777.0], [80.4, 778.0], [80.5, 778.0], [80.6, 778.0], [80.7, 778.0], [80.8, 778.0], [80.9, 778.0], [81.0, 778.0], [81.1, 778.0], [81.2, 778.0], [81.3, 778.0], [81.4, 779.0], [81.5, 779.0], [81.6, 779.0], [81.7, 780.0], [81.8, 780.0], [81.9, 780.0], [82.0, 780.0], [82.1, 780.0], [82.2, 780.0], [82.3, 780.0], [82.4, 782.0], [82.5, 782.0], [82.6, 782.0], [82.7, 783.0], [82.8, 783.0], [82.9, 783.0], [83.0, 783.0], [83.1, 783.0], [83.2, 783.0], [83.3, 783.0], [83.4, 784.0], [83.5, 784.0], [83.6, 784.0], [83.7, 784.0], [83.8, 784.0], [83.9, 784.0], [84.0, 784.0], [84.1, 784.0], [84.2, 784.0], [84.3, 784.0], [84.4, 785.0], [84.5, 785.0], [84.6, 785.0], [84.7, 785.0], [84.8, 785.0], [84.9, 785.0], [85.0, 785.0], [85.1, 786.0], [85.2, 786.0], [85.3, 786.0], [85.4, 786.0], [85.5, 786.0], [85.6, 786.0], [85.7, 787.0], [85.8, 787.0], [85.9, 787.0], [86.0, 787.0], [86.1, 787.0], [86.2, 787.0], [86.3, 787.0], [86.4, 787.0], [86.5, 787.0], [86.6, 787.0], [86.7, 788.0], [86.8, 788.0], [86.9, 788.0], [87.0, 788.0], [87.1, 788.0], [87.2, 788.0], [87.3, 788.0], [87.4, 789.0], [87.5, 789.0], [87.6, 789.0], [87.7, 789.0], [87.8, 789.0], [87.9, 789.0], [88.0, 789.0], [88.1, 790.0], [88.2, 790.0], [88.3, 790.0], [88.4, 791.0], [88.5, 791.0], [88.6, 791.0], [88.7, 791.0], [88.8, 791.0], [88.9, 791.0], [89.0, 791.0], [89.1, 791.0], [89.2, 791.0], [89.3, 791.0], [89.4, 793.0], [89.5, 793.0], [89.6, 793.0], [89.7, 793.0], [89.8, 793.0], [89.9, 793.0], [90.0, 793.0], [90.1, 793.0], [90.2, 793.0], [90.3, 793.0], [90.4, 794.0], [90.5, 794.0], [90.6, 794.0], [90.7, 795.0], [90.8, 795.0], [90.9, 795.0], [91.0, 795.0], [91.1, 795.0], [91.2, 795.0], [91.3, 795.0], [91.4, 796.0], [91.5, 796.0], [91.6, 796.0], [91.7, 796.0], [91.8, 796.0], [91.9, 796.0], [92.0, 796.0], [92.1, 797.0], [92.2, 797.0], [92.3, 797.0], [92.4, 797.0], [92.5, 797.0], [92.6, 797.0], [92.7, 798.0], [92.8, 798.0], [92.9, 798.0], [93.0, 798.0], [93.1, 798.0], [93.2, 798.0], [93.3, 798.0], [93.4, 799.0], [93.5, 799.0], [93.6, 799.0], [93.7, 799.0], [93.8, 799.0], [93.9, 799.0], [94.0, 799.0], [94.1, 800.0], [94.2, 800.0], [94.3, 800.0], [94.4, 801.0], [94.5, 801.0], [94.6, 801.0], [94.7, 802.0], [94.8, 802.0], [94.9, 802.0], [95.0, 802.0], [95.1, 802.0], [95.2, 802.0], [95.3, 802.0], [95.4, 803.0], [95.5, 803.0], [95.6, 803.0], [95.7, 803.0], [95.8, 803.0], [95.9, 803.0], [96.0, 803.0], [96.1, 805.0], [96.2, 805.0], [96.3, 805.0], [96.4, 808.0], [96.5, 808.0], [96.6, 808.0], [96.7, 809.0], [96.8, 809.0], [96.9, 809.0], [97.0, 809.0], [97.1, 810.0], [97.2, 810.0], [97.3, 810.0], [97.4, 811.0], [97.5, 811.0], [97.6, 811.0], [97.7, 811.0], [97.8, 811.0], [97.9, 811.0], [98.0, 811.0], [98.1, 812.0], [98.2, 812.0], [98.3, 812.0], [98.4, 813.0], [98.5, 813.0], [98.6, 813.0], [98.7, 1218.0], [98.8, 1218.0], [98.9, 1218.0], [99.0, 1218.0], [99.1, 1252.0], [99.2, 1252.0], [99.3, 1252.0], [99.4, 1666.0], [99.5, 1666.0], [99.6, 1666.0], [99.7, 2054.0], [99.8, 2054.0], [99.9, 2054.0], [100.0, 2054.0]], "isOverall": false, "label": "get booking Request", "isController": false}, {"data": [[0.0, 2706.0], [0.1, 2706.0], [0.2, 2706.0], [0.3, 2706.0], [0.4, 2769.0], [0.5, 2769.0], [0.6, 2769.0], [0.7, 2779.0], [0.8, 2779.0], [0.9, 2779.0], [1.0, 2799.0], [1.1, 2799.0], [1.2, 2799.0], [1.3, 2799.0], [1.4, 2811.0], [1.5, 2811.0], [1.6, 2811.0], [1.7, 2837.0], [1.8, 2837.0], [1.9, 2837.0], [2.0, 2837.0], [2.1, 2837.0], [2.2, 2837.0], [2.3, 2837.0], [2.4, 2848.0], [2.5, 2848.0], [2.6, 2848.0], [2.7, 2858.0], [2.8, 2858.0], [2.9, 2858.0], [3.0, 2874.0], [3.1, 2874.0], [3.2, 2874.0], [3.3, 2874.0], [3.4, 2875.0], [3.5, 2875.0], [3.6, 2875.0], [3.7, 2876.0], [3.8, 2876.0], [3.9, 2876.0], [4.0, 2877.0], [4.1, 2877.0], [4.2, 2877.0], [4.3, 2877.0], [4.4, 2883.0], [4.5, 2883.0], [4.6, 2883.0], [4.7, 2890.0], [4.8, 2890.0], [4.9, 2890.0], [5.0, 2899.0], [5.1, 2899.0], [5.2, 2899.0], [5.3, 2899.0], [5.4, 2899.0], [5.5, 2899.0], [5.6, 2899.0], [5.7, 2907.0], [5.8, 2907.0], [5.9, 2907.0], [6.0, 2907.0], [6.1, 2907.0], [6.2, 2907.0], [6.3, 2907.0], [6.4, 2920.0], [6.5, 2920.0], [6.6, 2920.0], [6.7, 2921.0], [6.8, 2921.0], [6.9, 2921.0], [7.0, 2927.0], [7.1, 2927.0], [7.2, 2927.0], [7.3, 2927.0], [7.4, 2928.0], [7.5, 2928.0], [7.6, 2928.0], [7.7, 2932.0], [7.8, 2932.0], [7.9, 2932.0], [8.0, 2942.0], [8.1, 2942.0], [8.2, 2942.0], [8.3, 2942.0], [8.4, 2945.0], [8.5, 2945.0], [8.6, 2945.0], [8.7, 2947.0], [8.8, 2947.0], [8.9, 2947.0], [9.0, 2948.0], [9.1, 2948.0], [9.2, 2948.0], [9.3, 2948.0], [9.4, 2949.0], [9.5, 2949.0], [9.6, 2949.0], [9.7, 2950.0], [9.8, 2950.0], [9.9, 2950.0], [10.0, 2950.0], [10.1, 2951.0], [10.2, 2951.0], [10.3, 2951.0], [10.4, 2957.0], [10.5, 2957.0], [10.6, 2957.0], [10.7, 2963.0], [10.8, 2963.0], [10.9, 2963.0], [11.0, 2963.0], [11.1, 2966.0], [11.2, 2966.0], [11.3, 2966.0], [11.4, 2968.0], [11.5, 2968.0], [11.6, 2968.0], [11.7, 2968.0], [11.8, 2968.0], [11.9, 2968.0], [12.0, 2968.0], [12.1, 2968.0], [12.2, 2968.0], [12.3, 2968.0], [12.4, 2970.0], [12.5, 2970.0], [12.6, 2970.0], [12.7, 2973.0], [12.8, 2973.0], [12.9, 2973.0], [13.0, 2973.0], [13.1, 2976.0], [13.2, 2976.0], [13.3, 2976.0], [13.4, 2987.0], [13.5, 2987.0], [13.6, 2987.0], [13.7, 2990.0], [13.8, 2990.0], [13.9, 2990.0], [14.0, 2990.0], [14.1, 2998.0], [14.2, 2998.0], [14.3, 2998.0], [14.4, 3003.0], [14.5, 3003.0], [14.6, 3003.0], [14.7, 3004.0], [14.8, 3004.0], [14.9, 3004.0], [15.0, 3004.0], [15.1, 3012.0], [15.2, 3012.0], [15.3, 3012.0], [15.4, 3019.0], [15.5, 3019.0], [15.6, 3019.0], [15.7, 3022.0], [15.8, 3022.0], [15.9, 3022.0], [16.0, 3022.0], [16.1, 3025.0], [16.2, 3025.0], [16.3, 3025.0], [16.4, 3028.0], [16.5, 3028.0], [16.6, 3028.0], [16.7, 3029.0], [16.8, 3029.0], [16.9, 3029.0], [17.0, 3029.0], [17.1, 3031.0], [17.2, 3031.0], [17.3, 3031.0], [17.4, 3032.0], [17.5, 3032.0], [17.6, 3032.0], [17.7, 3032.0], [17.8, 3032.0], [17.9, 3032.0], [18.0, 3032.0], [18.1, 3038.0], [18.2, 3038.0], [18.3, 3038.0], [18.4, 3039.0], [18.5, 3039.0], [18.6, 3039.0], [18.7, 3041.0], [18.8, 3041.0], [18.9, 3041.0], [19.0, 3041.0], [19.1, 3042.0], [19.2, 3042.0], [19.3, 3042.0], [19.4, 3043.0], [19.5, 3043.0], [19.6, 3043.0], [19.7, 3045.0], [19.8, 3045.0], [19.9, 3045.0], [20.0, 3047.0], [20.1, 3047.0], [20.2, 3047.0], [20.3, 3047.0], [20.4, 3054.0], [20.5, 3054.0], [20.6, 3054.0], [20.7, 3056.0], [20.8, 3056.0], [20.9, 3056.0], [21.0, 3058.0], [21.1, 3058.0], [21.2, 3058.0], [21.3, 3058.0], [21.4, 3059.0], [21.5, 3059.0], [21.6, 3059.0], [21.7, 3061.0], [21.8, 3061.0], [21.9, 3061.0], [22.0, 3062.0], [22.1, 3062.0], [22.2, 3062.0], [22.3, 3062.0], [22.4, 3063.0], [22.5, 3063.0], [22.6, 3063.0], [22.7, 3065.0], [22.8, 3065.0], [22.9, 3065.0], [23.0, 3066.0], [23.1, 3066.0], [23.2, 3066.0], [23.3, 3066.0], [23.4, 3068.0], [23.5, 3068.0], [23.6, 3068.0], [23.7, 3069.0], [23.8, 3069.0], [23.9, 3069.0], [24.0, 3069.0], [24.1, 3069.0], [24.2, 3069.0], [24.3, 3069.0], [24.4, 3070.0], [24.5, 3070.0], [24.6, 3070.0], [24.7, 3070.0], [24.8, 3070.0], [24.9, 3070.0], [25.0, 3072.0], [25.1, 3072.0], [25.2, 3072.0], [25.3, 3072.0], [25.4, 3072.0], [25.5, 3072.0], [25.6, 3072.0], [25.7, 3073.0], [25.8, 3073.0], [25.9, 3073.0], [26.0, 3076.0], [26.1, 3076.0], [26.2, 3076.0], [26.3, 3076.0], [26.4, 3077.0], [26.5, 3077.0], [26.6, 3077.0], [26.7, 3080.0], [26.8, 3080.0], [26.9, 3080.0], [27.0, 3083.0], [27.1, 3083.0], [27.2, 3083.0], [27.3, 3083.0], [27.4, 3094.0], [27.5, 3094.0], [27.6, 3094.0], [27.7, 3094.0], [27.8, 3094.0], [27.9, 3094.0], [28.0, 3097.0], [28.1, 3097.0], [28.2, 3097.0], [28.3, 3097.0], [28.4, 3098.0], [28.5, 3098.0], [28.6, 3098.0], [28.7, 3098.0], [28.8, 3098.0], [28.9, 3098.0], [29.0, 3103.0], [29.1, 3103.0], [29.2, 3103.0], [29.3, 3103.0], [29.4, 3108.0], [29.5, 3108.0], [29.6, 3108.0], [29.7, 3110.0], [29.8, 3110.0], [29.9, 3110.0], [30.0, 3114.0], [30.1, 3114.0], [30.2, 3114.0], [30.3, 3114.0], [30.4, 3114.0], [30.5, 3114.0], [30.6, 3114.0], [30.7, 3116.0], [30.8, 3116.0], [30.9, 3116.0], [31.0, 3118.0], [31.1, 3118.0], [31.2, 3118.0], [31.3, 3118.0], [31.4, 3121.0], [31.5, 3121.0], [31.6, 3121.0], [31.7, 3121.0], [31.8, 3121.0], [31.9, 3121.0], [32.0, 3123.0], [32.1, 3123.0], [32.2, 3123.0], [32.3, 3123.0], [32.4, 3125.0], [32.5, 3125.0], [32.6, 3125.0], [32.7, 3127.0], [32.8, 3127.0], [32.9, 3127.0], [33.0, 3128.0], [33.1, 3128.0], [33.2, 3128.0], [33.3, 3128.0], [33.4, 3132.0], [33.5, 3132.0], [33.6, 3132.0], [33.7, 3134.0], [33.8, 3134.0], [33.9, 3134.0], [34.0, 3140.0], [34.1, 3140.0], [34.2, 3140.0], [34.3, 3140.0], [34.4, 3143.0], [34.5, 3143.0], [34.6, 3143.0], [34.7, 3145.0], [34.8, 3145.0], [34.9, 3145.0], [35.0, 3147.0], [35.1, 3147.0], [35.2, 3147.0], [35.3, 3147.0], [35.4, 3149.0], [35.5, 3149.0], [35.6, 3149.0], [35.7, 3151.0], [35.8, 3151.0], [35.9, 3151.0], [36.0, 3151.0], [36.1, 3151.0], [36.2, 3151.0], [36.3, 3151.0], [36.4, 3151.0], [36.5, 3151.0], [36.6, 3151.0], [36.7, 3155.0], [36.8, 3155.0], [36.9, 3155.0], [37.0, 3155.0], [37.1, 3161.0], [37.2, 3161.0], [37.3, 3161.0], [37.4, 3169.0], [37.5, 3169.0], [37.6, 3169.0], [37.7, 3171.0], [37.8, 3171.0], [37.9, 3171.0], [38.0, 3171.0], [38.1, 3172.0], [38.2, 3172.0], [38.3, 3172.0], [38.4, 3178.0], [38.5, 3178.0], [38.6, 3178.0], [38.7, 3178.0], [38.8, 3178.0], [38.9, 3178.0], [39.0, 3178.0], [39.1, 3181.0], [39.2, 3181.0], [39.3, 3181.0], [39.4, 3186.0], [39.5, 3186.0], [39.6, 3186.0], [39.7, 3189.0], [39.8, 3189.0], [39.9, 3189.0], [40.0, 3189.0], [40.1, 3192.0], [40.2, 3192.0], [40.3, 3192.0], [40.4, 3196.0], [40.5, 3196.0], [40.6, 3196.0], [40.7, 3197.0], [40.8, 3197.0], [40.9, 3197.0], [41.0, 3197.0], [41.1, 3198.0], [41.2, 3198.0], [41.3, 3198.0], [41.4, 3201.0], [41.5, 3201.0], [41.6, 3201.0], [41.7, 3202.0], [41.8, 3202.0], [41.9, 3202.0], [42.0, 3202.0], [42.1, 3203.0], [42.2, 3203.0], [42.3, 3203.0], [42.4, 3203.0], [42.5, 3203.0], [42.6, 3203.0], [42.7, 3203.0], [42.8, 3203.0], [42.9, 3203.0], [43.0, 3203.0], [43.1, 3205.0], [43.2, 3205.0], [43.3, 3205.0], [43.4, 3206.0], [43.5, 3206.0], [43.6, 3206.0], [43.7, 3206.0], [43.8, 3206.0], [43.9, 3206.0], [44.0, 3206.0], [44.1, 3209.0], [44.2, 3209.0], [44.3, 3209.0], [44.4, 3209.0], [44.5, 3209.0], [44.6, 3209.0], [44.7, 3210.0], [44.8, 3210.0], [44.9, 3210.0], [45.0, 3210.0], [45.1, 3211.0], [45.2, 3211.0], [45.3, 3211.0], [45.4, 3213.0], [45.5, 3213.0], [45.6, 3213.0], [45.7, 3219.0], [45.8, 3219.0], [45.9, 3219.0], [46.0, 3219.0], [46.1, 3223.0], [46.2, 3223.0], [46.3, 3223.0], [46.4, 3224.0], [46.5, 3224.0], [46.6, 3224.0], [46.7, 3225.0], [46.8, 3225.0], [46.9, 3225.0], [47.0, 3225.0], [47.1, 3225.0], [47.2, 3225.0], [47.3, 3225.0], [47.4, 3227.0], [47.5, 3227.0], [47.6, 3227.0], [47.7, 3227.0], [47.8, 3227.0], [47.9, 3227.0], [48.0, 3227.0], [48.1, 3228.0], [48.2, 3228.0], [48.3, 3228.0], [48.4, 3230.0], [48.5, 3230.0], [48.6, 3230.0], [48.7, 3230.0], [48.8, 3230.0], [48.9, 3230.0], [49.0, 3230.0], [49.1, 3231.0], [49.2, 3231.0], [49.3, 3231.0], [49.4, 3233.0], [49.5, 3233.0], [49.6, 3233.0], [49.7, 3233.0], [49.8, 3233.0], [49.9, 3233.0], [50.0, 3233.0], [50.1, 3238.0], [50.2, 3238.0], [50.3, 3238.0], [50.4, 3241.0], [50.5, 3241.0], [50.6, 3241.0], [50.7, 3249.0], [50.8, 3249.0], [50.9, 3249.0], [51.0, 3249.0], [51.1, 3250.0], [51.2, 3250.0], [51.3, 3250.0], [51.4, 3251.0], [51.5, 3251.0], [51.6, 3251.0], [51.7, 3256.0], [51.8, 3256.0], [51.9, 3256.0], [52.0, 3256.0], [52.1, 3258.0], [52.2, 3258.0], [52.3, 3258.0], [52.4, 3266.0], [52.5, 3266.0], [52.6, 3266.0], [52.7, 3267.0], [52.8, 3267.0], [52.9, 3267.0], [53.0, 3267.0], [53.1, 3267.0], [53.2, 3267.0], [53.3, 3267.0], [53.4, 3268.0], [53.5, 3268.0], [53.6, 3268.0], [53.7, 3268.0], [53.8, 3268.0], [53.9, 3268.0], [54.0, 3268.0], [54.1, 3269.0], [54.2, 3269.0], [54.3, 3269.0], [54.4, 3270.0], [54.5, 3270.0], [54.6, 3270.0], [54.7, 3272.0], [54.8, 3272.0], [54.9, 3272.0], [55.0, 3272.0], [55.1, 3272.0], [55.2, 3272.0], [55.3, 3272.0], [55.4, 3273.0], [55.5, 3273.0], [55.6, 3273.0], [55.7, 3273.0], [55.8, 3273.0], [55.9, 3273.0], [56.0, 3273.0], [56.1, 3273.0], [56.2, 3273.0], [56.3, 3273.0], [56.4, 3274.0], [56.5, 3274.0], [56.6, 3274.0], [56.7, 3274.0], [56.8, 3274.0], [56.9, 3274.0], [57.0, 3274.0], [57.1, 3276.0], [57.2, 3276.0], [57.3, 3276.0], [57.4, 3276.0], [57.5, 3276.0], [57.6, 3276.0], [57.7, 3276.0], [57.8, 3276.0], [57.9, 3276.0], [58.0, 3276.0], [58.1, 3280.0], [58.2, 3280.0], [58.3, 3280.0], [58.4, 3281.0], [58.5, 3281.0], [58.6, 3281.0], [58.7, 3281.0], [58.8, 3281.0], [58.9, 3281.0], [59.0, 3281.0], [59.1, 3282.0], [59.2, 3282.0], [59.3, 3282.0], [59.4, 3283.0], [59.5, 3283.0], [59.6, 3283.0], [59.7, 3285.0], [59.8, 3285.0], [59.9, 3285.0], [60.0, 3285.0], [60.1, 3288.0], [60.2, 3288.0], [60.3, 3288.0], [60.4, 3289.0], [60.5, 3289.0], [60.6, 3289.0], [60.7, 3289.0], [60.8, 3289.0], [60.9, 3289.0], [61.0, 3289.0], [61.1, 3290.0], [61.2, 3290.0], [61.3, 3290.0], [61.4, 3295.0], [61.5, 3295.0], [61.6, 3295.0], [61.7, 3301.0], [61.8, 3301.0], [61.9, 3301.0], [62.0, 3301.0], [62.1, 3301.0], [62.2, 3301.0], [62.3, 3301.0], [62.4, 3303.0], [62.5, 3303.0], [62.6, 3303.0], [62.7, 3305.0], [62.8, 3305.0], [62.9, 3305.0], [63.0, 3305.0], [63.1, 3305.0], [63.2, 3305.0], [63.3, 3305.0], [63.4, 3307.0], [63.5, 3307.0], [63.6, 3307.0], [63.7, 3307.0], [63.8, 3307.0], [63.9, 3307.0], [64.0, 3307.0], [64.1, 3308.0], [64.2, 3308.0], [64.3, 3308.0], [64.4, 3309.0], [64.5, 3309.0], [64.6, 3309.0], [64.7, 3311.0], [64.8, 3311.0], [64.9, 3311.0], [65.0, 3311.0], [65.1, 3311.0], [65.2, 3311.0], [65.3, 3311.0], [65.4, 3312.0], [65.5, 3312.0], [65.6, 3312.0], [65.7, 3315.0], [65.8, 3315.0], [65.9, 3315.0], [66.0, 3315.0], [66.1, 3315.0], [66.2, 3315.0], [66.3, 3315.0], [66.4, 3317.0], [66.5, 3317.0], [66.6, 3317.0], [66.7, 3318.0], [66.8, 3318.0], [66.9, 3318.0], [67.0, 3318.0], [67.1, 3321.0], [67.2, 3321.0], [67.3, 3321.0], [67.4, 3324.0], [67.5, 3324.0], [67.6, 3324.0], [67.7, 3329.0], [67.8, 3329.0], [67.9, 3329.0], [68.0, 3329.0], [68.1, 3333.0], [68.2, 3333.0], [68.3, 3333.0], [68.4, 3335.0], [68.5, 3335.0], [68.6, 3335.0], [68.7, 3338.0], [68.8, 3338.0], [68.9, 3338.0], [69.0, 3338.0], [69.1, 3342.0], [69.2, 3342.0], [69.3, 3342.0], [69.4, 3343.0], [69.5, 3343.0], [69.6, 3343.0], [69.7, 3343.0], [69.8, 3343.0], [69.9, 3343.0], [70.0, 3343.0], [70.1, 3346.0], [70.2, 3346.0], [70.3, 3346.0], [70.4, 3346.0], [70.5, 3346.0], [70.6, 3346.0], [70.7, 3349.0], [70.8, 3349.0], [70.9, 3349.0], [71.0, 3349.0], [71.1, 3351.0], [71.2, 3351.0], [71.3, 3351.0], [71.4, 3351.0], [71.5, 3351.0], [71.6, 3351.0], [71.7, 3357.0], [71.8, 3357.0], [71.9, 3357.0], [72.0, 3357.0], [72.1, 3357.0], [72.2, 3357.0], [72.3, 3357.0], [72.4, 3360.0], [72.5, 3360.0], [72.6, 3360.0], [72.7, 3360.0], [72.8, 3360.0], [72.9, 3360.0], [73.0, 3360.0], [73.1, 3362.0], [73.2, 3362.0], [73.3, 3362.0], [73.4, 3366.0], [73.5, 3366.0], [73.6, 3366.0], [73.7, 3367.0], [73.8, 3367.0], [73.9, 3367.0], [74.0, 3367.0], [74.1, 3367.0], [74.2, 3367.0], [74.3, 3367.0], [74.4, 3368.0], [74.5, 3368.0], [74.6, 3368.0], [74.7, 3368.0], [74.8, 3368.0], [74.9, 3368.0], [75.0, 3368.0], [75.1, 3369.0], [75.2, 3369.0], [75.3, 3369.0], [75.4, 3370.0], [75.5, 3370.0], [75.6, 3370.0], [75.7, 3374.0], [75.8, 3374.0], [75.9, 3374.0], [76.0, 3374.0], [76.1, 3379.0], [76.2, 3379.0], [76.3, 3379.0], [76.4, 3383.0], [76.5, 3383.0], [76.6, 3383.0], [76.7, 3387.0], [76.8, 3387.0], [76.9, 3387.0], [77.0, 3387.0], [77.1, 3390.0], [77.2, 3390.0], [77.3, 3390.0], [77.4, 3393.0], [77.5, 3393.0], [77.6, 3393.0], [77.7, 3393.0], [77.8, 3393.0], [77.9, 3393.0], [78.0, 3393.0], [78.1, 3393.0], [78.2, 3393.0], [78.3, 3393.0], [78.4, 3393.0], [78.5, 3393.0], [78.6, 3393.0], [78.7, 3393.0], [78.8, 3393.0], [78.9, 3393.0], [79.0, 3393.0], [79.1, 3395.0], [79.2, 3395.0], [79.3, 3395.0], [79.4, 3400.0], [79.5, 3400.0], [79.6, 3400.0], [79.7, 3407.0], [79.8, 3407.0], [79.9, 3407.0], [80.0, 3408.0], [80.1, 3408.0], [80.2, 3408.0], [80.3, 3408.0], [80.4, 3409.0], [80.5, 3409.0], [80.6, 3409.0], [80.7, 3409.0], [80.8, 3409.0], [80.9, 3409.0], [81.0, 3412.0], [81.1, 3412.0], [81.2, 3412.0], [81.3, 3412.0], [81.4, 3413.0], [81.5, 3413.0], [81.6, 3413.0], [81.7, 3420.0], [81.8, 3420.0], [81.9, 3420.0], [82.0, 3422.0], [82.1, 3422.0], [82.2, 3422.0], [82.3, 3422.0], [82.4, 3425.0], [82.5, 3425.0], [82.6, 3425.0], [82.7, 3438.0], [82.8, 3438.0], [82.9, 3438.0], [83.0, 3439.0], [83.1, 3439.0], [83.2, 3439.0], [83.3, 3439.0], [83.4, 3440.0], [83.5, 3440.0], [83.6, 3440.0], [83.7, 3441.0], [83.8, 3441.0], [83.9, 3441.0], [84.0, 3450.0], [84.1, 3450.0], [84.2, 3450.0], [84.3, 3450.0], [84.4, 3451.0], [84.5, 3451.0], [84.6, 3451.0], [84.7, 3462.0], [84.8, 3462.0], [84.9, 3462.0], [85.0, 3466.0], [85.1, 3466.0], [85.2, 3466.0], [85.3, 3466.0], [85.4, 3506.0], [85.5, 3506.0], [85.6, 3506.0], [85.7, 3508.0], [85.8, 3508.0], [85.9, 3508.0], [86.0, 3508.0], [86.1, 3508.0], [86.2, 3508.0], [86.3, 3508.0], [86.4, 3511.0], [86.5, 3511.0], [86.6, 3511.0], [86.7, 3530.0], [86.8, 3530.0], [86.9, 3530.0], [87.0, 3530.0], [87.1, 3530.0], [87.2, 3530.0], [87.3, 3530.0], [87.4, 3534.0], [87.5, 3534.0], [87.6, 3534.0], [87.7, 3564.0], [87.8, 3564.0], [87.9, 3564.0], [88.0, 3576.0], [88.1, 3576.0], [88.2, 3576.0], [88.3, 3576.0], [88.4, 3583.0], [88.5, 3583.0], [88.6, 3583.0], [88.7, 3610.0], [88.8, 3610.0], [88.9, 3610.0], [89.0, 3636.0], [89.1, 3636.0], [89.2, 3636.0], [89.3, 3636.0], [89.4, 3637.0], [89.5, 3637.0], [89.6, 3637.0], [89.7, 3649.0], [89.8, 3649.0], [89.9, 3649.0], [90.0, 3665.0], [90.1, 3665.0], [90.2, 3665.0], [90.3, 3665.0], [90.4, 3670.0], [90.5, 3670.0], [90.6, 3670.0], [90.7, 3678.0], [90.8, 3678.0], [90.9, 3678.0], [91.0, 3690.0], [91.1, 3690.0], [91.2, 3690.0], [91.3, 3690.0], [91.4, 3708.0], [91.5, 3708.0], [91.6, 3708.0], [91.7, 3708.0], [91.8, 3708.0], [91.9, 3708.0], [92.0, 3733.0], [92.1, 3733.0], [92.2, 3733.0], [92.3, 3733.0], [92.4, 3739.0], [92.5, 3739.0], [92.6, 3739.0], [92.7, 3771.0], [92.8, 3771.0], [92.9, 3771.0], [93.0, 3777.0], [93.1, 3777.0], [93.2, 3777.0], [93.3, 3777.0], [93.4, 3798.0], [93.5, 3798.0], [93.6, 3798.0], [93.7, 3811.0], [93.8, 3811.0], [93.9, 3811.0], [94.0, 3821.0], [94.1, 3821.0], [94.2, 3821.0], [94.3, 3821.0], [94.4, 3830.0], [94.5, 3830.0], [94.6, 3830.0], [94.7, 3849.0], [94.8, 3849.0], [94.9, 3849.0], [95.0, 3858.0], [95.1, 3858.0], [95.2, 3858.0], [95.3, 3858.0], [95.4, 3859.0], [95.5, 3859.0], [95.6, 3859.0], [95.7, 3865.0], [95.8, 3865.0], [95.9, 3865.0], [96.0, 3867.0], [96.1, 3867.0], [96.2, 3867.0], [96.3, 3867.0], [96.4, 3880.0], [96.5, 3880.0], [96.6, 3880.0], [96.7, 3886.0], [96.8, 3886.0], [96.9, 3886.0], [97.0, 3888.0], [97.1, 3888.0], [97.2, 3888.0], [97.3, 3888.0], [97.4, 3892.0], [97.5, 3892.0], [97.6, 3892.0], [97.7, 3896.0], [97.8, 3896.0], [97.9, 3896.0], [98.0, 3949.0], [98.1, 3949.0], [98.2, 3949.0], [98.3, 3949.0], [98.4, 3988.0], [98.5, 3988.0], [98.6, 3988.0], [98.7, 4041.0], [98.8, 4041.0], [98.9, 4041.0], [99.0, 4070.0], [99.1, 4070.0], [99.2, 4070.0], [99.3, 4070.0], [99.4, 4100.0], [99.5, 4100.0], [99.6, 4100.0], [99.7, 4113.0], [99.8, 4113.0], [99.9, 4113.0]], "isOverall": false, "label": "login Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 135.0, "series": [{"data": [[300.0, 62.0], [600.0, 57.0], [700.0, 17.0], [1400.0, 1.0], [200.0, 8.0], [400.0, 14.0], [800.0, 5.0], [500.0, 135.0], [1000.0, 1.0]], "isOverall": false, "label": "create  bookingRequest", "isController": false}, {"data": [[300.0, 42.0], [600.0, 40.0], [1200.0, 2.0], [700.0, 125.0], [400.0, 36.0], [800.0, 14.0], [200.0, 6.0], [1600.0, 1.0], [500.0, 33.0], [2000.0, 1.0]], "isOverall": false, "label": "get booking Request", "isController": false}, {"data": [[2800.0, 13.0], [2700.0, 4.0], [2900.0, 26.0], [3000.0, 44.0], [3100.0, 37.0], [3200.0, 61.0], [3300.0, 53.0], [3400.0, 18.0], [3500.0, 10.0], [3600.0, 8.0], [3700.0, 7.0], [3800.0, 13.0], [3900.0, 2.0], [4000.0, 2.0], [4100.0, 2.0]], "isOverall": false, "label": "login Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 169.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 429.0, "series": [{"data": [[0.0, 169.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 429.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 302.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.2727272727272725, "minX": 1.7398233E12, "maxY": 248.68953880764883, "series": [{"data": [[1.73982336E12, 6.2727272727272725], [1.7398233E12, 248.68953880764883]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73982336E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 284.0, "minX": 1.0, "maxY": 4070.0, "series": [{"data": [[35.0, 814.0], [36.0, 803.0], [41.0, 805.0], [68.0, 785.0], [79.0, 788.0], [78.0, 790.0], [99.0, 795.0], [96.0, 799.0], [119.0, 806.0], [126.0, 784.0], [135.0, 804.0], [128.0, 791.0], [198.0, 644.5], [196.0, 678.0], [203.0, 607.0], [201.0, 628.0], [217.0, 423.6666666666667], [247.0, 336.5], [246.0, 334.0], [245.0, 329.5], [244.0, 327.0], [243.0, 326.5], [254.0, 345.0], [252.0, 341.0], [249.0, 339.0], [248.0, 341.5], [263.0, 351.0], [260.0, 348.0], [256.0, 352.0], [16.0, 1005.0], [300.0, 501.9466019417474], [299.0, 623.6279069767443], [298.0, 621.4], [297.0, 621.5], [296.0, 592.3333333333334], [18.0, 1461.0]], "isOverall": false, "label": "create  bookingRequest", "isController": false}, {"data": [[283.6666666666667, 530.93]], "isOverall": false, "label": "create  bookingRequest-Aggregated", "isController": false}, {"data": [[2.0, 1666.0], [3.0, 284.0], [4.0, 302.0], [5.0, 319.0], [6.0, 320.0], [7.0, 305.0], [9.0, 300.0], [10.0, 300.0], [11.0, 299.0], [12.0, 294.0], [14.0, 302.0], [16.0, 296.5], [17.0, 296.0], [18.0, 355.0], [20.0, 316.0], [22.0, 792.5], [25.0, 546.3333333333334], [29.0, 673.0], [35.0, 716.0], [36.0, 662.0], [38.0, 731.0], [41.0, 752.6666666666666], [42.0, 810.0], [45.0, 937.0], [48.0, 699.0], [50.0, 794.0], [53.0, 791.6666666666666], [54.0, 787.0], [59.0, 758.8], [61.0, 632.0], [67.0, 732.0], [64.0, 729.3333333333334], [71.0, 626.0], [70.0, 773.0], [69.0, 787.0], [68.0, 788.0], [79.0, 793.5], [78.0, 781.5], [77.0, 776.0], [76.0, 773.5], [83.0, 772.5], [85.0, 783.0], [88.0, 769.0], [95.0, 779.75], [94.0, 768.0], [92.0, 784.5], [99.0, 786.0], [97.0, 773.5], [102.0, 778.5], [107.0, 755.0], [106.0, 784.0], [111.0, 811.0], [110.0, 775.0], [109.0, 793.25], [108.0, 772.5], [115.0, 773.5], [113.0, 772.0], [119.0, 799.0], [118.0, 786.0], [117.0, 805.0], [122.0, 778.0], [121.0, 771.5], [125.0, 791.5], [135.0, 789.0], [128.0, 778.75], [142.0, 754.0], [141.0, 763.5], [139.0, 759.0], [138.0, 748.0], [137.0, 769.875], [151.0, 763.0], [150.0, 767.25], [147.0, 758.0], [146.0, 756.0], [157.0, 755.3333333333334], [154.0, 756.0], [166.0, 706.0], [164.0, 696.0], [163.0, 737.0], [161.0, 742.0], [160.0, 742.0], [170.0, 697.0], [169.0, 710.3333333333334], [182.0, 700.2], [177.0, 687.0], [191.0, 706.6], [187.0, 701.6], [185.0, 694.25], [184.0, 682.0], [199.0, 638.0], [198.0, 627.0], [196.0, 707.2], [207.0, 597.0], [206.0, 601.0], [203.0, 602.0], [202.0, 626.0], [201.0, 620.5], [215.0, 543.0], [214.0, 568.0], [213.0, 579.5], [211.0, 583.0], [210.0, 585.0], [223.0, 409.0], [222.0, 407.75], [218.0, 424.0], [217.0, 428.0], [216.0, 532.0], [224.0, 360.0], [247.0, 337.5], [245.0, 330.3333333333333], [243.0, 330.0], [242.0, 329.0], [240.0, 325.5], [254.0, 343.0], [253.0, 348.0], [252.0, 344.0], [251.0, 342.0], [249.0, 342.0], [271.0, 540.3333333333334], [267.0, 538.4285714285714], [264.0, 536.0], [263.0, 399.5], [260.0, 373.5], [258.0, 351.0], [257.0, 545.0], [256.0, 352.3333333333333], [285.0, 460.0], [282.0, 460.0], [280.0, 456.6666666666667], [278.0, 467.0], [277.0, 462.0], [274.0, 459.0], [300.0, 392.0], [299.0, 422.0], [298.0, 427.0], [297.0, 432.0], [296.0, 430.5], [295.0, 430.0], [293.0, 432.0], [291.0, 458.0], [289.0, 461.0], [1.0, 2054.0]], "isOverall": false, "label": "get booking Request", "isController": false}, {"data": [[153.5433333333333, 630.1100000000002]], "isOverall": false, "label": "get booking Request-Aggregated", "isController": false}, {"data": [[300.0, 3245.911564625848], [299.0, 4043.0], [298.0, 3989.0], [297.0, 4070.0]], "isOverall": false, "label": "login Request", "isController": false}, {"data": [[299.96666666666664, 3261.5833333333308]], "isOverall": false, "label": "login Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 34.28333333333333, "minX": 1.7398233E12, "maxY": 12995.833333333334, "series": [{"data": [[1.73982336E12, 168.23333333333332], [1.7398233E12, 12995.833333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73982336E12, 34.28333333333333], [1.7398233E12, 4265.716666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73982336E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 530.93, "minX": 1.7398233E12, "maxY": 3261.5833333333308, "series": [{"data": [[1.7398233E12, 530.93]], "isOverall": false, "label": "create  bookingRequest", "isController": false}, {"data": [[1.73982336E12, 586.1818181818182], [1.7398233E12, 631.7820069204154]], "isOverall": false, "label": "get booking Request", "isController": false}, {"data": [[1.7398233E12, 3261.5833333333308]], "isOverall": false, "label": "login Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73982336E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 530.8666666666669, "minX": 1.7398233E12, "maxY": 3260.5066666666667, "series": [{"data": [[1.7398233E12, 530.8666666666669]], "isOverall": false, "label": "create  bookingRequest", "isController": false}, {"data": [[1.73982336E12, 586.0], [1.7398233E12, 631.7543252595154]], "isOverall": false, "label": "get booking Request", "isController": false}, {"data": [[1.7398233E12, 3260.5066666666667]], "isOverall": false, "label": "login Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73982336E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7398233E12, "maxY": 2849.3333333333326, "series": [{"data": [[1.7398233E12, 0.0]], "isOverall": false, "label": "create  bookingRequest", "isController": false}, {"data": [[1.73982336E12, 0.0], [1.7398233E12, 0.0]], "isOverall": false, "label": "get booking Request", "isController": false}, {"data": [[1.7398233E12, 2849.3333333333326]], "isOverall": false, "label": "login Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73982336E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 284.0, "minX": 1.7398233E12, "maxY": 4113.0, "series": [{"data": [[1.73982336E12, 2054.0], [1.7398233E12, 4113.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73982336E12, 284.0], [1.7398233E12, 290.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73982336E12, 1976.4000000000003], [1.7398233E12, 3346.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73982336E12, 2054.0], [1.7398233E12, 3888.4]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73982336E12, 302.0], [1.7398233E12, 709.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.73982336E12, 2054.0], [1.7398233E12, 3486.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73982336E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 302.0, "minX": 11.0, "maxY": 2899.0, "series": [{"data": [[568.0, 2899.0], [321.0, 695.0], [11.0, 302.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 568.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 302.0, "minX": 11.0, "maxY": 2894.5, "series": [{"data": [[568.0, 2894.5], [321.0, 695.0], [11.0, 302.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 568.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.7398233E12, "maxY": 15.0, "series": [{"data": [[1.7398233E12, 15.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7398233E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.7398233E12, "maxY": 14.816666666666666, "series": [{"data": [[1.73982336E12, 0.18333333333333332], [1.7398233E12, 14.816666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73982336E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.7398233E12, "maxY": 5.0, "series": [{"data": [[1.7398233E12, 5.0]], "isOverall": false, "label": "create  bookingRequest-success", "isController": false}, {"data": [[1.7398233E12, 5.0]], "isOverall": false, "label": "login Request-success", "isController": false}, {"data": [[1.73982336E12, 0.18333333333333332], [1.7398233E12, 4.816666666666666]], "isOverall": false, "label": "get booking Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73982336E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.7398233E12, "maxY": 14.816666666666666, "series": [{"data": [[1.73982336E12, 0.18333333333333332], [1.7398233E12, 14.816666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73982336E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

