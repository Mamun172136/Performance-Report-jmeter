/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 377.0, "minX": 0.0, "maxY": 29408.0, "series": [{"data": [[0.0, 381.0], [0.1, 381.0], [0.2, 382.0], [0.3, 382.0], [0.4, 391.0], [0.5, 391.0], [0.6, 391.0], [0.7, 392.0], [0.8, 395.0], [0.9, 395.0], [1.0, 396.0], [1.1, 396.0], [1.2, 490.0], [1.3, 490.0], [1.4, 517.0], [1.5, 517.0], [1.6, 529.0], [1.7, 529.0], [1.8, 540.0], [1.9, 540.0], [2.0, 542.0], [2.1, 542.0], [2.2, 544.0], [2.3, 544.0], [2.4, 552.0], [2.5, 552.0], [2.6, 552.0], [2.7, 552.0], [2.8, 553.0], [2.9, 553.0], [3.0, 553.0], [3.1, 553.0], [3.2, 553.0], [3.3, 553.0], [3.4, 566.0], [3.5, 566.0], [3.6, 580.0], [3.7, 580.0], [3.8, 580.0], [3.9, 581.0], [4.0, 586.0], [4.1, 586.0], [4.2, 640.0], [4.3, 640.0], [4.4, 641.0], [4.5, 641.0], [4.6, 641.0], [4.7, 642.0], [4.8, 642.0], [4.9, 647.0], [5.0, 647.0], [5.1, 648.0], [5.2, 648.0], [5.3, 650.0], [5.4, 650.0], [5.5, 665.0], [5.6, 665.0], [5.7, 667.0], [5.8, 667.0], [5.9, 680.0], [6.0, 680.0], [6.1, 686.0], [6.2, 686.0], [6.3, 699.0], [6.4, 699.0], [6.5, 740.0], [6.6, 740.0], [6.7, 746.0], [6.8, 746.0], [6.9, 747.0], [7.0, 747.0], [7.1, 748.0], [7.2, 748.0], [7.3, 748.0], [7.4, 748.0], [7.5, 748.0], [7.6, 748.0], [7.7, 748.0], [7.8, 748.0], [7.9, 750.0], [8.0, 750.0], [8.1, 750.0], [8.2, 750.0], [8.3, 750.0], [8.4, 750.0], [8.5, 751.0], [8.6, 751.0], [8.7, 752.0], [8.8, 753.0], [8.9, 753.0], [9.0, 753.0], [9.1, 753.0], [9.2, 753.0], [9.3, 754.0], [9.4, 754.0], [9.5, 754.0], [9.6, 754.0], [9.7, 756.0], [9.8, 756.0], [9.9, 756.0], [10.0, 756.0], [10.1, 761.0], [10.2, 761.0], [10.3, 786.0], [10.4, 786.0], [10.5, 786.0], [10.6, 786.0], [10.7, 787.0], [10.8, 789.0], [10.9, 789.0], [11.0, 790.0], [11.1, 790.0], [11.2, 791.0], [11.3, 791.0], [11.4, 793.0], [11.5, 793.0], [11.6, 809.0], [11.7, 809.0], [11.8, 812.0], [11.9, 812.0], [12.0, 874.0], [12.1, 874.0], [12.2, 877.0], [12.3, 877.0], [12.4, 878.0], [12.5, 878.0], [12.6, 878.0], [12.7, 878.0], [12.8, 878.0], [12.9, 878.0], [13.0, 882.0], [13.1, 882.0], [13.2, 882.0], [13.3, 882.0], [13.4, 904.0], [13.5, 904.0], [13.6, 906.0], [13.7, 906.0], [13.8, 909.0], [13.9, 909.0], [14.0, 910.0], [14.1, 910.0], [14.2, 912.0], [14.3, 912.0], [14.4, 915.0], [14.5, 915.0], [14.6, 929.0], [14.7, 929.0], [14.8, 935.0], [14.9, 935.0], [15.0, 937.0], [15.1, 937.0], [15.2, 938.0], [15.3, 938.0], [15.4, 939.0], [15.5, 939.0], [15.6, 943.0], [15.7, 943.0], [15.8, 944.0], [15.9, 944.0], [16.0, 944.0], [16.1, 944.0], [16.2, 944.0], [16.3, 944.0], [16.4, 945.0], [16.5, 945.0], [16.6, 946.0], [16.7, 946.0], [16.8, 949.0], [16.9, 949.0], [17.0, 950.0], [17.1, 950.0], [17.2, 952.0], [17.3, 952.0], [17.4, 953.0], [17.5, 953.0], [17.6, 954.0], [17.7, 954.0], [17.8, 954.0], [17.9, 954.0], [18.0, 954.0], [18.1, 954.0], [18.2, 956.0], [18.3, 956.0], [18.4, 956.0], [18.5, 956.0], [18.6, 956.0], [18.7, 956.0], [18.8, 957.0], [18.9, 957.0], [19.0, 957.0], [19.1, 957.0], [19.2, 957.0], [19.3, 957.0], [19.4, 958.0], [19.5, 958.0], [19.6, 959.0], [19.7, 959.0], [19.8, 959.0], [19.9, 959.0], [20.0, 959.0], [20.1, 959.0], [20.2, 959.0], [20.3, 959.0], [20.4, 960.0], [20.5, 960.0], [20.6, 961.0], [20.7, 961.0], [20.8, 961.0], [20.9, 961.0], [21.0, 965.0], [21.1, 965.0], [21.2, 966.0], [21.3, 966.0], [21.4, 967.0], [21.5, 967.0], [21.6, 968.0], [21.7, 968.0], [21.8, 969.0], [21.9, 969.0], [22.0, 969.0], [22.1, 969.0], [22.2, 969.0], [22.3, 969.0], [22.4, 970.0], [22.5, 970.0], [22.6, 970.0], [22.7, 970.0], [22.8, 970.0], [22.9, 970.0], [23.0, 970.0], [23.1, 970.0], [23.2, 970.0], [23.3, 970.0], [23.4, 971.0], [23.5, 971.0], [23.6, 971.0], [23.7, 971.0], [23.8, 971.0], [23.9, 971.0], [24.0, 972.0], [24.1, 972.0], [24.2, 983.0], [24.3, 983.0], [24.4, 985.0], [24.5, 985.0], [24.6, 985.0], [24.7, 985.0], [24.8, 987.0], [24.9, 987.0], [25.0, 987.0], [25.1, 987.0], [25.2, 988.0], [25.3, 988.0], [25.4, 991.0], [25.5, 991.0], [25.6, 991.0], [25.7, 991.0], [25.8, 991.0], [25.9, 991.0], [26.0, 992.0], [26.1, 992.0], [26.2, 992.0], [26.3, 992.0], [26.4, 992.0], [26.5, 992.0], [26.6, 998.0], [26.7, 998.0], [26.8, 1001.0], [26.9, 1001.0], [27.0, 1013.0], [27.1, 1013.0], [27.2, 1015.0], [27.3, 1015.0], [27.4, 1015.0], [27.5, 1015.0], [27.6, 1015.0], [27.7, 1015.0], [27.8, 1016.0], [27.9, 1016.0], [28.0, 1035.0], [28.1, 1035.0], [28.2, 1035.0], [28.3, 1035.0], [28.4, 1035.0], [28.5, 1035.0], [28.6, 1037.0], [28.7, 1037.0], [28.8, 1038.0], [28.9, 1038.0], [29.0, 1038.0], [29.1, 1038.0], [29.2, 1039.0], [29.3, 1039.0], [29.4, 1039.0], [29.5, 1039.0], [29.6, 1039.0], [29.7, 1039.0], [29.8, 1039.0], [29.9, 1039.0], [30.0, 1040.0], [30.1, 1040.0], [30.2, 1040.0], [30.3, 1040.0], [30.4, 1057.0], [30.5, 1057.0], [30.6, 1057.0], [30.7, 1057.0], [30.8, 1058.0], [30.9, 1058.0], [31.0, 1059.0], [31.1, 1059.0], [31.2, 1084.0], [31.3, 1084.0], [31.4, 1103.0], [31.5, 1103.0], [31.6, 1112.0], [31.7, 1112.0], [31.8, 1113.0], [31.9, 1113.0], [32.0, 1113.0], [32.1, 1113.0], [32.2, 1114.0], [32.3, 1114.0], [32.4, 1116.0], [32.5, 1116.0], [32.6, 1117.0], [32.7, 1117.0], [32.8, 1119.0], [32.9, 1119.0], [33.0, 1135.0], [33.1, 1135.0], [33.2, 1149.0], [33.3, 1149.0], [33.4, 1156.0], [33.5, 1156.0], [33.6, 1156.0], [33.7, 1156.0], [33.8, 1160.0], [33.9, 1160.0], [34.0, 1162.0], [34.1, 1162.0], [34.2, 1194.0], [34.3, 1194.0], [34.4, 1196.0], [34.5, 1196.0], [34.6, 1196.0], [34.7, 1196.0], [34.8, 1199.0], [34.9, 1199.0], [35.0, 1200.0], [35.1, 1200.0], [35.2, 1201.0], [35.3, 1201.0], [35.4, 1201.0], [35.5, 1203.0], [35.6, 1203.0], [35.7, 1204.0], [35.8, 1204.0], [35.9, 1205.0], [36.0, 1205.0], [36.1, 1205.0], [36.2, 1205.0], [36.3, 1206.0], [36.4, 1206.0], [36.5, 1206.0], [36.6, 1206.0], [36.7, 1206.0], [36.8, 1206.0], [36.9, 1206.0], [37.0, 1206.0], [37.1, 1206.0], [37.2, 1206.0], [37.3, 1206.0], [37.4, 1206.0], [37.5, 1206.0], [37.6, 1206.0], [37.7, 1207.0], [37.8, 1207.0], [37.9, 1207.0], [38.0, 1207.0], [38.1, 1207.0], [38.2, 1207.0], [38.3, 1208.0], [38.4, 1208.0], [38.5, 1208.0], [38.6, 1208.0], [38.7, 1209.0], [38.8, 1209.0], [38.9, 1209.0], [39.0, 1209.0], [39.1, 1209.0], [39.2, 1209.0], [39.3, 1209.0], [39.4, 1209.0], [39.5, 1209.0], [39.6, 1209.0], [39.7, 1209.0], [39.8, 1209.0], [39.9, 1210.0], [40.0, 1210.0], [40.1, 1210.0], [40.2, 1210.0], [40.3, 1211.0], [40.4, 1211.0], [40.5, 1211.0], [40.6, 1211.0], [40.7, 1211.0], [40.8, 1211.0], [40.9, 1211.0], [41.0, 1211.0], [41.1, 1211.0], [41.2, 1211.0], [41.3, 1211.0], [41.4, 1211.0], [41.5, 1212.0], [41.6, 1212.0], [41.7, 1212.0], [41.8, 1212.0], [41.9, 1212.0], [42.0, 1212.0], [42.1, 1212.0], [42.2, 1212.0], [42.3, 1212.0], [42.4, 1212.0], [42.5, 1212.0], [42.6, 1212.0], [42.7, 1212.0], [42.8, 1212.0], [42.9, 1213.0], [43.0, 1213.0], [43.1, 1213.0], [43.2, 1213.0], [43.3, 1213.0], [43.4, 1213.0], [43.5, 1213.0], [43.6, 1213.0], [43.7, 1214.0], [43.8, 1214.0], [43.9, 1214.0], [44.0, 1214.0], [44.1, 1214.0], [44.2, 1214.0], [44.3, 1215.0], [44.4, 1215.0], [44.5, 1215.0], [44.6, 1215.0], [44.7, 1216.0], [44.8, 1216.0], [44.9, 1217.0], [45.0, 1217.0], [45.1, 1220.0], [45.2, 1220.0], [45.3, 1221.0], [45.4, 1221.0], [45.5, 1230.0], [45.6, 1230.0], [45.7, 1236.0], [45.8, 1236.0], [45.9, 1241.0], [46.0, 1241.0], [46.1, 1242.0], [46.2, 1242.0], [46.3, 1243.0], [46.4, 1243.0], [46.5, 1245.0], [46.6, 1245.0], [46.7, 1245.0], [46.8, 1245.0], [46.9, 1247.0], [47.0, 1247.0], [47.1, 1247.0], [47.2, 1247.0], [47.3, 1250.0], [47.4, 1250.0], [47.5, 1250.0], [47.6, 1250.0], [47.7, 1250.0], [47.8, 1250.0], [47.9, 1253.0], [48.0, 1253.0], [48.1, 1255.0], [48.2, 1255.0], [48.3, 1256.0], [48.4, 1256.0], [48.5, 1256.0], [48.6, 1256.0], [48.7, 1260.0], [48.8, 1260.0], [48.9, 1262.0], [49.0, 1262.0], [49.1, 1271.0], [49.2, 1271.0], [49.3, 1276.0], [49.4, 1276.0], [49.5, 1276.0], [49.6, 1276.0], [49.7, 1278.0], [49.8, 1278.0], [49.9, 1278.0], [50.0, 1278.0], [50.1, 1278.0], [50.2, 1278.0], [50.3, 1279.0], [50.4, 1279.0], [50.5, 1279.0], [50.6, 1279.0], [50.7, 1281.0], [50.8, 1281.0], [50.9, 1281.0], [51.0, 1281.0], [51.1, 1281.0], [51.2, 1281.0], [51.3, 1282.0], [51.4, 1282.0], [51.5, 1282.0], [51.6, 1282.0], [51.7, 1283.0], [51.8, 1283.0], [51.9, 1283.0], [52.0, 1283.0], [52.1, 1283.0], [52.2, 1283.0], [52.3, 1284.0], [52.4, 1284.0], [52.5, 1285.0], [52.6, 1285.0], [52.7, 1286.0], [52.8, 1286.0], [52.9, 1287.0], [53.0, 1287.0], [53.1, 1287.0], [53.2, 1287.0], [53.3, 1288.0], [53.4, 1288.0], [53.5, 1288.0], [53.6, 1288.0], [53.7, 1288.0], [53.8, 1288.0], [53.9, 1288.0], [54.0, 1288.0], [54.1, 1289.0], [54.2, 1289.0], [54.3, 1290.0], [54.4, 1290.0], [54.5, 1291.0], [54.6, 1291.0], [54.7, 1292.0], [54.8, 1292.0], [54.9, 1292.0], [55.0, 1292.0], [55.1, 1292.0], [55.2, 1292.0], [55.3, 1293.0], [55.4, 1293.0], [55.5, 1294.0], [55.6, 1294.0], [55.7, 1294.0], [55.8, 1294.0], [55.9, 1295.0], [56.0, 1295.0], [56.1, 1295.0], [56.2, 1295.0], [56.3, 1295.0], [56.4, 1295.0], [56.5, 1296.0], [56.6, 1296.0], [56.7, 1296.0], [56.8, 1296.0], [56.9, 1296.0], [57.0, 1296.0], [57.1, 1296.0], [57.2, 1296.0], [57.3, 1297.0], [57.4, 1297.0], [57.5, 1298.0], [57.6, 1298.0], [57.7, 1299.0], [57.8, 1299.0], [57.9, 1299.0], [58.0, 1299.0], [58.1, 1300.0], [58.2, 1300.0], [58.3, 1300.0], [58.4, 1300.0], [58.5, 1301.0], [58.6, 1301.0], [58.7, 1301.0], [58.8, 1301.0], [58.9, 1302.0], [59.0, 1302.0], [59.1, 1302.0], [59.2, 1302.0], [59.3, 1304.0], [59.4, 1304.0], [59.5, 1304.0], [59.6, 1304.0], [59.7, 1305.0], [59.8, 1305.0], [59.9, 1305.0], [60.0, 1305.0], [60.1, 1306.0], [60.2, 1306.0], [60.3, 1306.0], [60.4, 1306.0], [60.5, 1307.0], [60.6, 1307.0], [60.7, 1307.0], [60.8, 1307.0], [60.9, 1307.0], [61.0, 1307.0], [61.1, 1307.0], [61.2, 1307.0], [61.3, 1308.0], [61.4, 1308.0], [61.5, 1309.0], [61.6, 1309.0], [61.7, 1309.0], [61.8, 1309.0], [61.9, 1309.0], [62.0, 1309.0], [62.1, 1309.0], [62.2, 1309.0], [62.3, 1310.0], [62.4, 1310.0], [62.5, 1310.0], [62.6, 1310.0], [62.7, 1311.0], [62.8, 1311.0], [62.9, 1311.0], [63.0, 1311.0], [63.1, 1312.0], [63.2, 1312.0], [63.3, 1313.0], [63.4, 1313.0], [63.5, 1313.0], [63.6, 1313.0], [63.7, 1314.0], [63.8, 1314.0], [63.9, 1314.0], [64.0, 1314.0], [64.1, 1316.0], [64.2, 1316.0], [64.3, 1316.0], [64.4, 1316.0], [64.5, 1317.0], [64.6, 1317.0], [64.7, 1317.0], [64.8, 1317.0], [64.9, 1319.0], [65.0, 1319.0], [65.1, 1320.0], [65.2, 1320.0], [65.3, 1321.0], [65.4, 1321.0], [65.5, 1321.0], [65.6, 1321.0], [65.7, 1322.0], [65.8, 1322.0], [65.9, 1326.0], [66.0, 1326.0], [66.1, 1329.0], [66.2, 1329.0], [66.3, 1333.0], [66.4, 1333.0], [66.5, 1334.0], [66.6, 1334.0], [66.7, 1337.0], [66.8, 1337.0], [66.9, 1338.0], [67.0, 1338.0], [67.1, 1342.0], [67.2, 1342.0], [67.3, 1348.0], [67.4, 1348.0], [67.5, 1353.0], [67.6, 1353.0], [67.7, 1353.0], [67.8, 1353.0], [67.9, 1353.0], [68.0, 1353.0], [68.1, 1354.0], [68.2, 1354.0], [68.3, 1354.0], [68.4, 1354.0], [68.5, 1357.0], [68.6, 1357.0], [68.7, 1358.0], [68.8, 1358.0], [68.9, 1358.0], [69.0, 1358.0], [69.1, 1359.0], [69.2, 1359.0], [69.3, 1362.0], [69.4, 1362.0], [69.5, 1362.0], [69.6, 1362.0], [69.7, 1364.0], [69.8, 1364.0], [69.9, 1365.0], [70.0, 1365.0], [70.1, 1365.0], [70.2, 1365.0], [70.3, 1365.0], [70.4, 1365.0], [70.5, 1367.0], [70.6, 1367.0], [70.7, 1368.0], [70.8, 1368.0], [70.9, 1369.0], [71.0, 1369.0], [71.1, 1369.0], [71.2, 1369.0], [71.3, 1369.0], [71.4, 1369.0], [71.5, 1370.0], [71.6, 1370.0], [71.7, 1371.0], [71.8, 1371.0], [71.9, 1371.0], [72.0, 1371.0], [72.1, 1371.0], [72.2, 1371.0], [72.3, 1373.0], [72.4, 1373.0], [72.5, 1373.0], [72.6, 1373.0], [72.7, 1374.0], [72.8, 1374.0], [72.9, 1375.0], [73.0, 1375.0], [73.1, 1375.0], [73.2, 1375.0], [73.3, 1375.0], [73.4, 1375.0], [73.5, 1376.0], [73.6, 1376.0], [73.7, 1376.0], [73.8, 1376.0], [73.9, 1376.0], [74.0, 1376.0], [74.1, 1376.0], [74.2, 1376.0], [74.3, 1378.0], [74.4, 1378.0], [74.5, 1382.0], [74.6, 1382.0], [74.7, 1382.0], [74.8, 1382.0], [74.9, 1384.0], [75.0, 1384.0], [75.1, 1384.0], [75.2, 1384.0], [75.3, 1387.0], [75.4, 1387.0], [75.5, 1392.0], [75.6, 1392.0], [75.7, 1396.0], [75.8, 1396.0], [75.9, 1425.0], [76.0, 1425.0], [76.1, 1434.0], [76.2, 1434.0], [76.3, 1436.0], [76.4, 1436.0], [76.5, 1441.0], [76.6, 1441.0], [76.7, 1447.0], [76.8, 1447.0], [76.9, 1448.0], [77.0, 1448.0], [77.1, 1462.0], [77.2, 1462.0], [77.3, 1472.0], [77.4, 1472.0], [77.5, 1482.0], [77.6, 1482.0], [77.7, 1484.0], [77.8, 1484.0], [77.9, 1484.0], [78.0, 1484.0], [78.1, 1485.0], [78.2, 1485.0], [78.3, 1492.0], [78.4, 1492.0], [78.5, 1499.0], [78.6, 1499.0], [78.7, 1503.0], [78.8, 1503.0], [78.9, 1506.0], [79.0, 1506.0], [79.1, 1510.0], [79.2, 1510.0], [79.3, 1510.0], [79.4, 1510.0], [79.5, 1547.0], [79.6, 1547.0], [79.7, 1547.0], [79.8, 1547.0], [79.9, 1557.0], [80.0, 1557.0], [80.1, 1558.0], [80.2, 1558.0], [80.3, 1559.0], [80.4, 1559.0], [80.5, 1559.0], [80.6, 1559.0], [80.7, 1559.0], [80.8, 1559.0], [80.9, 1559.0], [81.0, 1559.0], [81.1, 1560.0], [81.2, 1560.0], [81.3, 1561.0], [81.4, 1561.0], [81.5, 1561.0], [81.6, 1561.0], [81.7, 1562.0], [81.8, 1562.0], [81.9, 1585.0], [82.0, 1585.0], [82.1, 1586.0], [82.2, 1586.0], [82.3, 1587.0], [82.4, 1587.0], [82.5, 1591.0], [82.6, 1591.0], [82.7, 1612.0], [82.8, 1612.0], [82.9, 1614.0], [83.0, 1614.0], [83.1, 1618.0], [83.2, 1618.0], [83.3, 1620.0], [83.4, 1620.0], [83.5, 1621.0], [83.6, 1621.0], [83.7, 1622.0], [83.8, 1622.0], [83.9, 1622.0], [84.0, 1622.0], [84.1, 1622.0], [84.2, 1622.0], [84.3, 1622.0], [84.4, 1622.0], [84.5, 1623.0], [84.6, 1623.0], [84.7, 1625.0], [84.8, 1625.0], [84.9, 1631.0], [85.0, 1631.0], [85.1, 1638.0], [85.2, 1638.0], [85.3, 1640.0], [85.4, 1640.0], [85.5, 1644.0], [85.6, 1644.0], [85.7, 1644.0], [85.8, 1644.0], [85.9, 1646.0], [86.0, 1646.0], [86.1, 1651.0], [86.2, 1651.0], [86.3, 1672.0], [86.4, 1672.0], [86.5, 1703.0], [86.6, 1703.0], [86.7, 1706.0], [86.8, 1706.0], [86.9, 1711.0], [87.0, 1711.0], [87.1, 1712.0], [87.2, 1712.0], [87.3, 1713.0], [87.4, 1713.0], [87.5, 1719.0], [87.6, 1719.0], [87.7, 1722.0], [87.8, 1722.0], [87.9, 1723.0], [88.0, 1723.0], [88.1, 1727.0], [88.2, 1727.0], [88.3, 1728.0], [88.4, 1728.0], [88.5, 1728.0], [88.6, 1728.0], [88.7, 1730.0], [88.8, 1730.0], [88.9, 1733.0], [89.0, 1733.0], [89.1, 1733.0], [89.2, 1733.0], [89.3, 1734.0], [89.4, 1734.0], [89.5, 1734.0], [89.6, 1734.0], [89.7, 1734.0], [89.8, 1734.0], [89.9, 1735.0], [90.0, 1735.0], [90.1, 1735.0], [90.2, 1735.0], [90.3, 1735.0], [90.4, 1735.0], [90.5, 1735.0], [90.6, 1735.0], [90.7, 1735.0], [90.8, 1735.0], [90.9, 1736.0], [91.0, 1736.0], [91.1, 1736.0], [91.2, 1736.0], [91.3, 1737.0], [91.4, 1737.0], [91.5, 1737.0], [91.6, 1737.0], [91.7, 1737.0], [91.8, 1737.0], [91.9, 1738.0], [92.0, 1738.0], [92.1, 1738.0], [92.2, 1738.0], [92.3, 1740.0], [92.4, 1740.0], [92.5, 1741.0], [92.6, 1741.0], [92.7, 1743.0], [92.8, 1743.0], [92.9, 1744.0], [93.0, 1744.0], [93.1, 1744.0], [93.2, 1744.0], [93.3, 1748.0], [93.4, 1748.0], [93.5, 1748.0], [93.6, 1748.0], [93.7, 1748.0], [93.8, 1748.0], [93.9, 1751.0], [94.0, 1751.0], [94.1, 1751.0], [94.2, 1751.0], [94.3, 1752.0], [94.4, 1752.0], [94.5, 1753.0], [94.6, 1753.0], [94.7, 1754.0], [94.8, 1754.0], [94.9, 1756.0], [95.0, 1756.0], [95.1, 1757.0], [95.2, 1757.0], [95.3, 1757.0], [95.4, 1757.0], [95.5, 1758.0], [95.6, 1758.0], [95.7, 1759.0], [95.8, 1759.0], [95.9, 1760.0], [96.0, 1760.0], [96.1, 1764.0], [96.2, 1764.0], [96.3, 1768.0], [96.4, 1768.0], [96.5, 1769.0], [96.6, 1769.0], [96.7, 1770.0], [96.8, 1770.0], [96.9, 1776.0], [97.0, 1776.0], [97.1, 1778.0], [97.2, 1778.0], [97.3, 1781.0], [97.4, 1781.0], [97.5, 1794.0], [97.6, 1794.0], [97.7, 1807.0], [97.8, 1807.0], [97.9, 1810.0], [98.0, 1810.0], [98.1, 1818.0], [98.2, 1818.0], [98.3, 1819.0], [98.4, 1819.0], [98.5, 1820.0], [98.6, 1820.0], [98.7, 1920.0], [98.8, 1920.0], [98.9, 1922.0], [99.0, 1922.0], [99.1, 4048.0], [99.2, 4048.0], [99.3, 4658.0], [99.4, 4658.0], [99.5, 4666.0], [99.6, 4666.0], [99.7, 4823.0], [99.8, 4823.0], [99.9, 4837.0], [100.0, 4837.0]], "isOverall": false, "label": "create  bookingRequest", "isController": false}, {"data": [[0.0, 377.0], [0.1, 377.0], [0.2, 377.0], [0.3, 377.0], [0.4, 378.0], [0.5, 378.0], [0.6, 378.0], [0.7, 380.0], [0.8, 380.0], [0.9, 380.0], [1.0, 381.0], [1.1, 381.0], [1.2, 383.0], [1.3, 383.0], [1.4, 385.0], [1.5, 385.0], [1.6, 393.0], [1.7, 393.0], [1.8, 393.0], [1.9, 393.0], [2.0, 393.0], [2.1, 393.0], [2.2, 424.0], [2.3, 424.0], [2.4, 424.0], [2.5, 424.0], [2.6, 424.0], [2.7, 424.0], [2.8, 513.0], [2.9, 513.0], [3.0, 520.0], [3.1, 520.0], [3.2, 522.0], [3.3, 522.0], [3.4, 522.0], [3.5, 522.0], [3.6, 525.0], [3.7, 525.0], [3.8, 525.0], [3.9, 526.0], [4.0, 528.0], [4.1, 528.0], [4.2, 539.0], [4.3, 539.0], [4.4, 540.0], [4.5, 540.0], [4.6, 540.0], [4.7, 541.0], [4.8, 541.0], [4.9, 546.0], [5.0, 546.0], [5.1, 547.0], [5.2, 547.0], [5.3, 548.0], [5.4, 548.0], [5.5, 549.0], [5.6, 549.0], [5.7, 549.0], [5.8, 549.0], [5.9, 553.0], [6.0, 553.0], [6.1, 553.0], [6.2, 553.0], [6.3, 553.0], [6.4, 553.0], [6.5, 564.0], [6.6, 564.0], [6.7, 565.0], [6.8, 565.0], [6.9, 565.0], [7.0, 565.0], [7.1, 565.0], [7.2, 565.0], [7.3, 565.0], [7.4, 565.0], [7.5, 565.0], [7.6, 565.0], [7.7, 565.0], [7.8, 565.0], [7.9, 566.0], [8.0, 566.0], [8.1, 566.0], [8.2, 566.0], [8.3, 566.0], [8.4, 566.0], [8.5, 567.0], [8.6, 567.0], [8.7, 567.0], [8.8, 567.0], [8.9, 567.0], [9.0, 567.0], [9.1, 570.0], [9.2, 570.0], [9.3, 612.0], [9.4, 622.0], [9.5, 622.0], [9.6, 662.0], [9.7, 662.0], [9.8, 663.0], [9.9, 663.0], [10.0, 666.0], [10.1, 666.0], [10.2, 667.0], [10.3, 667.0], [10.4, 679.0], [10.5, 679.0], [10.6, 681.0], [10.7, 681.0], [10.8, 682.0], [10.9, 682.0], [11.0, 684.0], [11.1, 684.0], [11.2, 686.0], [11.3, 686.0], [11.4, 687.0], [11.5, 687.0], [11.6, 687.0], [11.7, 687.0], [11.8, 692.0], [11.9, 692.0], [12.0, 693.0], [12.1, 693.0], [12.2, 695.0], [12.3, 695.0], [12.4, 697.0], [12.5, 697.0], [12.6, 698.0], [12.7, 698.0], [12.8, 698.0], [12.9, 698.0], [13.0, 783.0], [13.1, 783.0], [13.2, 784.0], [13.3, 784.0], [13.4, 785.0], [13.5, 785.0], [13.6, 785.0], [13.7, 785.0], [13.8, 785.0], [13.9, 785.0], [14.0, 786.0], [14.1, 786.0], [14.2, 786.0], [14.3, 786.0], [14.4, 787.0], [14.5, 787.0], [14.6, 808.0], [14.7, 808.0], [14.8, 812.0], [14.9, 812.0], [15.0, 818.0], [15.1, 818.0], [15.2, 822.0], [15.3, 822.0], [15.4, 823.0], [15.5, 823.0], [15.6, 826.0], [15.7, 826.0], [15.8, 826.0], [15.9, 826.0], [16.0, 831.0], [16.1, 831.0], [16.2, 834.0], [16.3, 834.0], [16.4, 835.0], [16.5, 835.0], [16.6, 838.0], [16.7, 838.0], [16.8, 839.0], [16.9, 839.0], [17.0, 841.0], [17.1, 841.0], [17.2, 856.0], [17.3, 856.0], [17.4, 856.0], [17.5, 856.0], [17.6, 872.0], [17.7, 872.0], [17.8, 876.0], [17.9, 876.0], [18.0, 884.0], [18.1, 884.0], [18.2, 885.0], [18.3, 885.0], [18.4, 885.0], [18.5, 885.0], [18.6, 887.0], [18.7, 887.0], [18.8, 894.0], [18.9, 894.0], [19.0, 900.0], [19.1, 900.0], [19.2, 904.0], [19.3, 904.0], [19.4, 906.0], [19.5, 906.0], [19.6, 907.0], [19.7, 907.0], [19.8, 909.0], [19.9, 909.0], [20.0, 926.0], [20.1, 926.0], [20.2, 942.0], [20.3, 942.0], [20.4, 947.0], [20.5, 947.0], [20.6, 948.0], [20.7, 948.0], [20.8, 950.0], [20.9, 950.0], [21.0, 951.0], [21.1, 951.0], [21.2, 951.0], [21.3, 951.0], [21.4, 952.0], [21.5, 952.0], [21.6, 953.0], [21.7, 953.0], [21.8, 953.0], [21.9, 953.0], [22.0, 955.0], [22.1, 955.0], [22.2, 956.0], [22.3, 956.0], [22.4, 958.0], [22.5, 958.0], [22.6, 958.0], [22.7, 958.0], [22.8, 958.0], [22.9, 958.0], [23.0, 961.0], [23.1, 961.0], [23.2, 964.0], [23.3, 964.0], [23.4, 965.0], [23.5, 965.0], [23.6, 965.0], [23.7, 965.0], [23.8, 965.0], [23.9, 965.0], [24.0, 985.0], [24.1, 985.0], [24.2, 986.0], [24.3, 986.0], [24.4, 986.0], [24.5, 986.0], [24.6, 991.0], [24.7, 991.0], [24.8, 991.0], [24.9, 991.0], [25.0, 998.0], [25.1, 998.0], [25.2, 998.0], [25.3, 998.0], [25.4, 1000.0], [25.5, 1000.0], [25.6, 1002.0], [25.7, 1002.0], [25.8, 1005.0], [25.9, 1005.0], [26.0, 1025.0], [26.1, 1025.0], [26.2, 1051.0], [26.3, 1051.0], [26.4, 1058.0], [26.5, 1058.0], [26.6, 1062.0], [26.7, 1062.0], [26.8, 1085.0], [26.9, 1085.0], [27.0, 1085.0], [27.1, 1085.0], [27.2, 1089.0], [27.3, 1089.0], [27.4, 1090.0], [27.5, 1090.0], [27.6, 1090.0], [27.7, 1090.0], [27.8, 1093.0], [27.9, 1093.0], [28.0, 1093.0], [28.1, 1093.0], [28.2, 1093.0], [28.3, 1093.0], [28.4, 1094.0], [28.5, 1094.0], [28.6, 1095.0], [28.7, 1095.0], [28.8, 1096.0], [28.9, 1096.0], [29.0, 1096.0], [29.1, 1096.0], [29.2, 1098.0], [29.3, 1098.0], [29.4, 1099.0], [29.5, 1099.0], [29.6, 1099.0], [29.7, 1099.0], [29.8, 1100.0], [29.9, 1100.0], [30.0, 1100.0], [30.1, 1100.0], [30.2, 1100.0], [30.3, 1100.0], [30.4, 1101.0], [30.5, 1101.0], [30.6, 1101.0], [30.7, 1101.0], [30.8, 1101.0], [30.9, 1101.0], [31.0, 1101.0], [31.1, 1101.0], [31.2, 1101.0], [31.3, 1101.0], [31.4, 1102.0], [31.5, 1102.0], [31.6, 1102.0], [31.7, 1102.0], [31.8, 1102.0], [31.9, 1102.0], [32.0, 1102.0], [32.1, 1102.0], [32.2, 1102.0], [32.3, 1102.0], [32.4, 1102.0], [32.5, 1102.0], [32.6, 1104.0], [32.7, 1104.0], [32.8, 1105.0], [32.9, 1105.0], [33.0, 1105.0], [33.1, 1105.0], [33.2, 1108.0], [33.3, 1108.0], [33.4, 1121.0], [33.5, 1121.0], [33.6, 1130.0], [33.7, 1130.0], [33.8, 1130.0], [33.9, 1130.0], [34.0, 1131.0], [34.1, 1131.0], [34.2, 1132.0], [34.3, 1132.0], [34.4, 1141.0], [34.5, 1141.0], [34.6, 1141.0], [34.7, 1141.0], [34.8, 1158.0], [34.9, 1158.0], [35.0, 1164.0], [35.1, 1164.0], [35.2, 1166.0], [35.3, 1166.0], [35.4, 1167.0], [35.5, 1167.0], [35.6, 1167.0], [35.7, 1167.0], [35.8, 1170.0], [35.9, 1170.0], [36.0, 1170.0], [36.1, 1170.0], [36.2, 1172.0], [36.3, 1172.0], [36.4, 1199.0], [36.5, 1199.0], [36.6, 1203.0], [36.7, 1203.0], [36.8, 1203.0], [36.9, 1203.0], [37.0, 1207.0], [37.1, 1207.0], [37.2, 1207.0], [37.3, 1207.0], [37.4, 1209.0], [37.5, 1209.0], [37.6, 1210.0], [37.7, 1210.0], [37.8, 1212.0], [37.9, 1212.0], [38.0, 1213.0], [38.1, 1213.0], [38.2, 1213.0], [38.3, 1213.0], [38.4, 1219.0], [38.5, 1219.0], [38.6, 1225.0], [38.7, 1225.0], [38.8, 1226.0], [38.9, 1226.0], [39.0, 1227.0], [39.1, 1227.0], [39.2, 1234.0], [39.3, 1234.0], [39.4, 1236.0], [39.5, 1236.0], [39.6, 1238.0], [39.7, 1238.0], [39.8, 1239.0], [39.9, 1239.0], [40.0, 1240.0], [40.1, 1240.0], [40.2, 1240.0], [40.3, 1240.0], [40.4, 1242.0], [40.5, 1242.0], [40.6, 1243.0], [40.7, 1243.0], [40.8, 1243.0], [40.9, 1243.0], [41.0, 1244.0], [41.1, 1244.0], [41.2, 1247.0], [41.3, 1247.0], [41.4, 1247.0], [41.5, 1248.0], [41.6, 1248.0], [41.7, 1250.0], [41.8, 1250.0], [41.9, 1250.0], [42.0, 1250.0], [42.1, 1251.0], [42.2, 1251.0], [42.3, 1251.0], [42.4, 1251.0], [42.5, 1251.0], [42.6, 1251.0], [42.7, 1252.0], [42.8, 1252.0], [42.9, 1252.0], [43.0, 1252.0], [43.1, 1252.0], [43.2, 1252.0], [43.3, 1253.0], [43.4, 1253.0], [43.5, 1253.0], [43.6, 1253.0], [43.7, 1254.0], [43.8, 1254.0], [43.9, 1255.0], [44.0, 1255.0], [44.1, 1256.0], [44.2, 1256.0], [44.3, 1258.0], [44.4, 1258.0], [44.5, 1259.0], [44.6, 1259.0], [44.7, 1260.0], [44.8, 1260.0], [44.9, 1260.0], [45.0, 1260.0], [45.1, 1262.0], [45.2, 1262.0], [45.3, 1263.0], [45.4, 1263.0], [45.5, 1263.0], [45.6, 1263.0], [45.7, 1264.0], [45.8, 1264.0], [45.9, 1265.0], [46.0, 1265.0], [46.1, 1266.0], [46.2, 1266.0], [46.3, 1268.0], [46.4, 1268.0], [46.5, 1270.0], [46.6, 1270.0], [46.7, 1271.0], [46.8, 1271.0], [46.9, 1271.0], [47.0, 1271.0], [47.1, 1273.0], [47.2, 1273.0], [47.3, 1274.0], [47.4, 1274.0], [47.5, 1276.0], [47.6, 1276.0], [47.7, 1280.0], [47.8, 1280.0], [47.9, 1281.0], [48.0, 1281.0], [48.1, 1281.0], [48.2, 1281.0], [48.3, 1281.0], [48.4, 1281.0], [48.5, 1282.0], [48.6, 1282.0], [48.7, 1282.0], [48.8, 1282.0], [48.9, 1282.0], [49.0, 1282.0], [49.1, 1283.0], [49.2, 1283.0], [49.3, 1284.0], [49.4, 1284.0], [49.5, 1284.0], [49.6, 1284.0], [49.7, 1284.0], [49.8, 1284.0], [49.9, 1284.0], [50.0, 1284.0], [50.1, 1284.0], [50.2, 1284.0], [50.3, 1285.0], [50.4, 1285.0], [50.5, 1289.0], [50.6, 1289.0], [50.7, 1290.0], [50.8, 1290.0], [50.9, 1292.0], [51.0, 1292.0], [51.1, 1292.0], [51.2, 1292.0], [51.3, 1293.0], [51.4, 1293.0], [51.5, 1294.0], [51.6, 1294.0], [51.7, 1294.0], [51.8, 1294.0], [51.9, 1295.0], [52.0, 1295.0], [52.1, 1295.0], [52.2, 1295.0], [52.3, 1295.0], [52.4, 1295.0], [52.5, 1295.0], [52.6, 1295.0], [52.7, 1295.0], [52.8, 1295.0], [52.9, 1296.0], [53.0, 1296.0], [53.1, 1296.0], [53.2, 1296.0], [53.3, 1297.0], [53.4, 1297.0], [53.5, 1299.0], [53.6, 1299.0], [53.7, 1299.0], [53.8, 1299.0], [53.9, 1300.0], [54.0, 1300.0], [54.1, 1300.0], [54.2, 1300.0], [54.3, 1300.0], [54.4, 1300.0], [54.5, 1302.0], [54.6, 1302.0], [54.7, 1302.0], [54.8, 1302.0], [54.9, 1304.0], [55.0, 1304.0], [55.1, 1304.0], [55.2, 1304.0], [55.3, 1304.0], [55.4, 1304.0], [55.5, 1304.0], [55.6, 1304.0], [55.7, 1307.0], [55.8, 1307.0], [55.9, 1308.0], [56.0, 1308.0], [56.1, 1310.0], [56.2, 1310.0], [56.3, 1310.0], [56.4, 1310.0], [56.5, 1311.0], [56.6, 1311.0], [56.7, 1313.0], [56.8, 1313.0], [56.9, 1313.0], [57.0, 1313.0], [57.1, 1320.0], [57.2, 1320.0], [57.3, 1322.0], [57.4, 1322.0], [57.5, 1325.0], [57.6, 1325.0], [57.7, 1325.0], [57.8, 1325.0], [57.9, 1329.0], [58.0, 1329.0], [58.1, 1330.0], [58.2, 1330.0], [58.3, 1333.0], [58.4, 1333.0], [58.5, 1333.0], [58.6, 1333.0], [58.7, 1334.0], [58.8, 1334.0], [58.9, 1334.0], [59.0, 1334.0], [59.1, 1334.0], [59.2, 1334.0], [59.3, 1335.0], [59.4, 1335.0], [59.5, 1335.0], [59.6, 1335.0], [59.7, 1337.0], [59.8, 1337.0], [59.9, 1338.0], [60.0, 1338.0], [60.1, 1339.0], [60.2, 1339.0], [60.3, 1340.0], [60.4, 1340.0], [60.5, 1342.0], [60.6, 1342.0], [60.7, 1342.0], [60.8, 1342.0], [60.9, 1342.0], [61.0, 1342.0], [61.1, 1345.0], [61.2, 1345.0], [61.3, 1346.0], [61.4, 1346.0], [61.5, 1346.0], [61.6, 1346.0], [61.7, 1348.0], [61.8, 1348.0], [61.9, 1350.0], [62.0, 1350.0], [62.1, 1350.0], [62.2, 1350.0], [62.3, 1350.0], [62.4, 1350.0], [62.5, 1350.0], [62.6, 1350.0], [62.7, 1351.0], [62.8, 1351.0], [62.9, 1351.0], [63.0, 1351.0], [63.1, 1355.0], [63.2, 1355.0], [63.3, 1356.0], [63.4, 1356.0], [63.5, 1359.0], [63.6, 1359.0], [63.7, 1361.0], [63.8, 1361.0], [63.9, 1362.0], [64.0, 1362.0], [64.1, 1367.0], [64.2, 1367.0], [64.3, 1370.0], [64.4, 1370.0], [64.5, 1375.0], [64.6, 1375.0], [64.7, 1376.0], [64.8, 1376.0], [64.9, 1376.0], [65.0, 1376.0], [65.1, 1379.0], [65.2, 1379.0], [65.3, 1379.0], [65.4, 1379.0], [65.5, 1380.0], [65.6, 1380.0], [65.7, 1381.0], [65.8, 1381.0], [65.9, 1383.0], [66.0, 1383.0], [66.1, 1383.0], [66.2, 1383.0], [66.3, 1384.0], [66.4, 1384.0], [66.5, 1384.0], [66.6, 1384.0], [66.7, 1386.0], [66.8, 1386.0], [66.9, 1387.0], [67.0, 1387.0], [67.1, 1388.0], [67.2, 1388.0], [67.3, 1390.0], [67.4, 1390.0], [67.5, 1391.0], [67.6, 1391.0], [67.7, 1392.0], [67.8, 1392.0], [67.9, 1392.0], [68.0, 1392.0], [68.1, 1406.0], [68.2, 1406.0], [68.3, 1409.0], [68.4, 1409.0], [68.5, 1409.0], [68.6, 1409.0], [68.7, 1411.0], [68.8, 1411.0], [68.9, 1411.0], [69.0, 1411.0], [69.1, 1414.0], [69.2, 1414.0], [69.3, 1415.0], [69.4, 1415.0], [69.5, 1418.0], [69.6, 1418.0], [69.7, 1420.0], [69.8, 1420.0], [69.9, 1425.0], [70.0, 1425.0], [70.1, 1427.0], [70.2, 1427.0], [70.3, 1429.0], [70.4, 1429.0], [70.5, 1430.0], [70.6, 1430.0], [70.7, 1430.0], [70.8, 1430.0], [70.9, 1430.0], [71.0, 1430.0], [71.1, 1432.0], [71.2, 1432.0], [71.3, 1433.0], [71.4, 1433.0], [71.5, 1434.0], [71.6, 1434.0], [71.7, 1434.0], [71.8, 1434.0], [71.9, 1436.0], [72.0, 1436.0], [72.1, 1459.0], [72.2, 1459.0], [72.3, 1463.0], [72.4, 1463.0], [72.5, 1463.0], [72.6, 1463.0], [72.7, 1469.0], [72.8, 1469.0], [72.9, 1479.0], [73.0, 1479.0], [73.1, 1481.0], [73.2, 1481.0], [73.3, 1485.0], [73.4, 1485.0], [73.5, 1486.0], [73.6, 1486.0], [73.7, 1486.0], [73.8, 1486.0], [73.9, 1488.0], [74.0, 1488.0], [74.1, 1488.0], [74.2, 1488.0], [74.3, 1489.0], [74.4, 1489.0], [74.5, 1490.0], [74.6, 1490.0], [74.7, 1493.0], [74.8, 1493.0], [74.9, 1498.0], [75.0, 1498.0], [75.1, 1507.0], [75.2, 1507.0], [75.3, 1507.0], [75.4, 1507.0], [75.5, 1509.0], [75.6, 1509.0], [75.7, 1509.0], [75.8, 1509.0], [75.9, 1509.0], [76.0, 1509.0], [76.1, 1509.0], [76.2, 1509.0], [76.3, 1511.0], [76.4, 1511.0], [76.5, 1516.0], [76.6, 1516.0], [76.7, 1554.0], [76.8, 1554.0], [76.9, 1559.0], [77.0, 1559.0], [77.1, 1565.0], [77.2, 1565.0], [77.3, 1568.0], [77.4, 1568.0], [77.5, 1579.0], [77.6, 1579.0], [77.7, 1586.0], [77.8, 1586.0], [77.9, 1587.0], [78.0, 1587.0], [78.1, 1594.0], [78.2, 1594.0], [78.3, 1598.0], [78.4, 1598.0], [78.5, 1599.0], [78.6, 1599.0], [78.7, 1599.0], [78.8, 1599.0], [78.9, 1602.0], [79.0, 1602.0], [79.1, 1602.0], [79.2, 1602.0], [79.3, 1607.0], [79.4, 1607.0], [79.5, 1608.0], [79.6, 1608.0], [79.7, 1608.0], [79.8, 1608.0], [79.9, 1610.0], [80.0, 1610.0], [80.1, 1614.0], [80.2, 1614.0], [80.3, 1614.0], [80.4, 1614.0], [80.5, 1614.0], [80.6, 1614.0], [80.7, 1614.0], [80.8, 1614.0], [80.9, 1615.0], [81.0, 1615.0], [81.1, 1616.0], [81.2, 1616.0], [81.3, 1617.0], [81.4, 1617.0], [81.5, 1617.0], [81.6, 1617.0], [81.7, 1618.0], [81.8, 1618.0], [81.9, 1618.0], [82.0, 1618.0], [82.1, 1619.0], [82.2, 1619.0], [82.3, 1619.0], [82.4, 1619.0], [82.5, 1620.0], [82.6, 1620.0], [82.7, 1620.0], [82.8, 1620.0], [82.9, 1620.0], [83.0, 1620.0], [83.1, 1621.0], [83.2, 1621.0], [83.3, 1621.0], [83.4, 1621.0], [83.5, 1621.0], [83.6, 1621.0], [83.7, 1624.0], [83.8, 1624.0], [83.9, 1624.0], [84.0, 1624.0], [84.1, 1625.0], [84.2, 1625.0], [84.3, 1628.0], [84.4, 1628.0], [84.5, 1629.0], [84.6, 1629.0], [84.7, 1629.0], [84.8, 1629.0], [84.9, 1631.0], [85.0, 1631.0], [85.1, 1633.0], [85.2, 1633.0], [85.3, 1633.0], [85.4, 1633.0], [85.5, 1634.0], [85.6, 1634.0], [85.7, 1635.0], [85.8, 1635.0], [85.9, 1637.0], [86.0, 1637.0], [86.1, 1638.0], [86.2, 1638.0], [86.3, 1638.0], [86.4, 1638.0], [86.5, 1638.0], [86.6, 1638.0], [86.7, 1639.0], [86.8, 1639.0], [86.9, 1640.0], [87.0, 1640.0], [87.1, 1643.0], [87.2, 1643.0], [87.3, 1644.0], [87.4, 1644.0], [87.5, 1644.0], [87.6, 1644.0], [87.7, 1644.0], [87.8, 1644.0], [87.9, 1645.0], [88.0, 1645.0], [88.1, 1645.0], [88.2, 1645.0], [88.3, 1646.0], [88.4, 1646.0], [88.5, 1649.0], [88.6, 1649.0], [88.7, 1654.0], [88.8, 1654.0], [88.9, 1655.0], [89.0, 1655.0], [89.1, 1701.0], [89.2, 1701.0], [89.3, 1701.0], [89.4, 1701.0], [89.5, 1702.0], [89.6, 1702.0], [89.7, 1730.0], [89.8, 1730.0], [89.9, 1736.0], [90.0, 1736.0], [90.1, 1739.0], [90.2, 1739.0], [90.3, 1740.0], [90.4, 1740.0], [90.5, 1742.0], [90.6, 1742.0], [90.7, 1745.0], [90.8, 1745.0], [90.9, 1745.0], [91.0, 1745.0], [91.1, 1748.0], [91.2, 1748.0], [91.3, 1750.0], [91.4, 1750.0], [91.5, 1755.0], [91.6, 1755.0], [91.7, 1767.0], [91.8, 1767.0], [91.9, 1771.0], [92.0, 1771.0], [92.1, 1772.0], [92.2, 1772.0], [92.3, 1776.0], [92.4, 1776.0], [92.5, 1776.0], [92.6, 1776.0], [92.7, 1776.0], [92.8, 1776.0], [92.9, 1777.0], [93.0, 1777.0], [93.1, 1777.0], [93.2, 1777.0], [93.3, 1777.0], [93.4, 1777.0], [93.5, 1780.0], [93.6, 1780.0], [93.7, 3070.0], [93.8, 3070.0], [93.9, 3668.0], [94.0, 3668.0], [94.1, 3681.0], [94.2, 3681.0], [94.3, 3752.0], [94.4, 3752.0], [94.5, 3753.0], [94.6, 3753.0], [94.7, 3755.0], [94.8, 3755.0], [94.9, 3778.0], [95.0, 3778.0], [95.1, 3855.0], [95.2, 3855.0], [95.3, 3949.0], [95.4, 3949.0], [95.5, 4196.0], [95.6, 4196.0], [95.7, 4210.0], [95.8, 4210.0], [95.9, 4490.0], [96.0, 4490.0], [96.1, 4495.0], [96.2, 4495.0], [96.3, 4613.0], [96.4, 4613.0], [96.5, 5427.0], [96.6, 5427.0], [96.7, 5429.0], [96.8, 5429.0], [96.9, 5443.0], [97.0, 5443.0], [97.1, 5497.0], [97.2, 5497.0], [97.3, 5499.0], [97.4, 5499.0], [97.5, 5502.0], [97.6, 5502.0], [97.7, 5504.0], [97.8, 5504.0], [97.9, 5510.0], [98.0, 5510.0], [98.1, 5515.0], [98.2, 5515.0], [98.3, 5555.0], [98.4, 5555.0], [98.5, 5572.0], [98.6, 5572.0], [98.7, 5578.0], [98.8, 5578.0], [98.9, 5625.0], [99.0, 5625.0], [99.1, 5630.0], [99.2, 5630.0], [99.3, 5640.0], [99.4, 5640.0], [99.5, 5650.0], [99.6, 5650.0], [99.7, 5669.0], [99.8, 5669.0], [99.9, 5674.0], [100.0, 5674.0]], "isOverall": false, "label": "get booking Request", "isController": false}, {"data": [[0.0, 9420.0], [0.1, 9420.0], [0.2, 9579.0], [0.3, 9579.0], [0.4, 9590.0], [0.5, 9590.0], [0.6, 9590.0], [0.7, 9590.0], [0.8, 9591.0], [0.9, 9591.0], [1.0, 9593.0], [1.1, 9593.0], [1.2, 9600.0], [1.3, 9600.0], [1.4, 9621.0], [1.5, 9621.0], [1.6, 9627.0], [1.7, 9627.0], [1.8, 9628.0], [1.9, 9628.0], [2.0, 9628.0], [2.1, 9628.0], [2.2, 9632.0], [2.3, 9632.0], [2.4, 9633.0], [2.5, 9633.0], [2.6, 9636.0], [2.7, 9636.0], [2.8, 9636.0], [2.9, 9644.0], [3.0, 9644.0], [3.1, 9650.0], [3.2, 9650.0], [3.3, 9653.0], [3.4, 9653.0], [3.5, 9662.0], [3.6, 9662.0], [3.7, 9664.0], [3.8, 9664.0], [3.9, 9673.0], [4.0, 9673.0], [4.1, 9674.0], [4.2, 9674.0], [4.3, 9675.0], [4.4, 9675.0], [4.5, 9675.0], [4.6, 9675.0], [4.7, 9675.0], [4.8, 9675.0], [4.9, 9676.0], [5.0, 9676.0], [5.1, 9677.0], [5.2, 9677.0], [5.3, 9679.0], [5.4, 9679.0], [5.5, 9679.0], [5.6, 9679.0], [5.7, 9680.0], [5.8, 9680.0], [5.9, 9681.0], [6.0, 9681.0], [6.1, 9684.0], [6.2, 9684.0], [6.3, 9687.0], [6.4, 9687.0], [6.5, 9693.0], [6.6, 9693.0], [6.7, 9693.0], [6.8, 9693.0], [6.9, 9699.0], [7.0, 9699.0], [7.1, 9701.0], [7.2, 9701.0], [7.3, 9702.0], [7.4, 9702.0], [7.5, 9705.0], [7.6, 9705.0], [7.7, 9707.0], [7.8, 9707.0], [7.9, 9710.0], [8.0, 9710.0], [8.1, 9711.0], [8.2, 9711.0], [8.3, 9712.0], [8.4, 9712.0], [8.5, 9719.0], [8.6, 9719.0], [8.7, 9722.0], [8.8, 9722.0], [8.9, 9722.0], [9.0, 9722.0], [9.1, 9722.0], [9.2, 9722.0], [9.3, 9725.0], [9.4, 9725.0], [9.5, 9725.0], [9.6, 9725.0], [9.7, 9728.0], [9.8, 9728.0], [9.9, 9728.0], [10.0, 9728.0], [10.1, 9734.0], [10.2, 9734.0], [10.3, 9735.0], [10.4, 9736.0], [10.5, 9736.0], [10.6, 9738.0], [10.7, 9738.0], [10.8, 9764.0], [10.9, 9764.0], [11.0, 9767.0], [11.1, 9767.0], [11.2, 9772.0], [11.3, 9772.0], [11.4, 9774.0], [11.5, 9774.0], [11.6, 9774.0], [11.7, 9774.0], [11.8, 9781.0], [11.9, 9781.0], [12.0, 9786.0], [12.1, 9786.0], [12.2, 9793.0], [12.3, 9793.0], [12.4, 9796.0], [12.5, 9796.0], [12.6, 9809.0], [12.7, 9809.0], [12.8, 9815.0], [12.9, 9815.0], [13.0, 9817.0], [13.1, 9817.0], [13.2, 9831.0], [13.3, 9831.0], [13.4, 9862.0], [13.5, 9862.0], [13.6, 9904.0], [13.7, 9904.0], [13.8, 9908.0], [13.9, 9908.0], [14.0, 9910.0], [14.1, 9910.0], [14.2, 9910.0], [14.3, 9910.0], [14.4, 9910.0], [14.5, 9910.0], [14.6, 9911.0], [14.7, 9911.0], [14.8, 9913.0], [14.9, 9913.0], [15.0, 9913.0], [15.1, 9913.0], [15.2, 9913.0], [15.3, 9913.0], [15.4, 9914.0], [15.5, 9914.0], [15.6, 9914.0], [15.7, 9914.0], [15.8, 9915.0], [15.9, 9915.0], [16.0, 9915.0], [16.1, 9915.0], [16.2, 9915.0], [16.3, 9915.0], [16.4, 9915.0], [16.5, 9915.0], [16.6, 9915.0], [16.7, 9915.0], [16.8, 9916.0], [16.9, 9916.0], [17.0, 9916.0], [17.1, 9916.0], [17.2, 9916.0], [17.3, 9916.0], [17.4, 9917.0], [17.5, 9917.0], [17.6, 9918.0], [17.7, 9918.0], [17.8, 9920.0], [17.9, 9920.0], [18.0, 9920.0], [18.1, 9920.0], [18.2, 9920.0], [18.3, 9920.0], [18.4, 9920.0], [18.5, 9920.0], [18.6, 9921.0], [18.7, 9921.0], [18.8, 9921.0], [18.9, 9921.0], [19.0, 9923.0], [19.1, 9923.0], [19.2, 9924.0], [19.3, 9924.0], [19.4, 9924.0], [19.5, 9924.0], [19.6, 9931.0], [19.7, 9931.0], [19.8, 9932.0], [19.9, 9932.0], [20.0, 9935.0], [20.1, 9935.0], [20.2, 9935.0], [20.3, 9935.0], [20.4, 9936.0], [20.5, 9936.0], [20.6, 9939.0], [20.7, 9939.0], [20.8, 9940.0], [20.9, 9940.0], [21.0, 9940.0], [21.1, 9940.0], [21.2, 9944.0], [21.3, 9944.0], [21.4, 9944.0], [21.5, 9944.0], [21.6, 9950.0], [21.7, 9950.0], [21.8, 9951.0], [21.9, 9951.0], [22.0, 9952.0], [22.1, 9952.0], [22.2, 9954.0], [22.3, 9954.0], [22.4, 9957.0], [22.5, 9957.0], [22.6, 9959.0], [22.7, 9959.0], [22.8, 9968.0], [22.9, 9968.0], [23.0, 10019.0], [23.1, 10019.0], [23.2, 10282.0], [23.3, 10282.0], [23.4, 10519.0], [23.5, 10519.0], [23.6, 10538.0], [23.7, 10538.0], [23.8, 10564.0], [23.9, 10564.0], [24.0, 10615.0], [24.1, 10615.0], [24.2, 10629.0], [24.3, 10629.0], [24.4, 10671.0], [24.5, 10671.0], [24.6, 10683.0], [24.7, 10683.0], [24.8, 10708.0], [24.9, 10708.0], [25.0, 10710.0], [25.1, 10710.0], [25.2, 10711.0], [25.3, 10711.0], [25.4, 10713.0], [25.5, 10713.0], [25.6, 10731.0], [25.7, 10731.0], [25.8, 10749.0], [25.9, 10749.0], [26.0, 10753.0], [26.1, 10753.0], [26.2, 10790.0], [26.3, 10790.0], [26.4, 10791.0], [26.5, 10791.0], [26.6, 10813.0], [26.7, 10813.0], [26.8, 10815.0], [26.9, 10815.0], [27.0, 10817.0], [27.1, 10817.0], [27.2, 10824.0], [27.3, 10824.0], [27.4, 10829.0], [27.5, 10829.0], [27.6, 10833.0], [27.7, 10833.0], [27.8, 10835.0], [27.9, 10835.0], [28.0, 10839.0], [28.1, 10839.0], [28.2, 10841.0], [28.3, 10841.0], [28.4, 10844.0], [28.5, 10844.0], [28.6, 10844.0], [28.7, 10844.0], [28.8, 10846.0], [28.9, 10846.0], [29.0, 10851.0], [29.1, 10851.0], [29.2, 10853.0], [29.3, 10853.0], [29.4, 10854.0], [29.5, 10854.0], [29.6, 10854.0], [29.7, 10854.0], [29.8, 10862.0], [29.9, 10862.0], [30.0, 10867.0], [30.1, 10867.0], [30.2, 10871.0], [30.3, 10871.0], [30.4, 10875.0], [30.5, 10875.0], [30.6, 10876.0], [30.7, 10876.0], [30.8, 10877.0], [30.9, 10877.0], [31.0, 10879.0], [31.1, 10879.0], [31.2, 10885.0], [31.3, 10885.0], [31.4, 10899.0], [31.5, 10899.0], [31.6, 10901.0], [31.7, 10901.0], [31.8, 10918.0], [31.9, 10918.0], [32.0, 10920.0], [32.1, 10920.0], [32.2, 10923.0], [32.3, 10923.0], [32.4, 10934.0], [32.5, 10934.0], [32.6, 10938.0], [32.7, 10938.0], [32.8, 10942.0], [32.9, 10942.0], [33.0, 10949.0], [33.1, 10949.0], [33.2, 10959.0], [33.3, 10959.0], [33.4, 10960.0], [33.5, 10960.0], [33.6, 10967.0], [33.7, 10967.0], [33.8, 10968.0], [33.9, 10968.0], [34.0, 10972.0], [34.1, 10972.0], [34.2, 10979.0], [34.3, 10979.0], [34.4, 10981.0], [34.5, 10981.0], [34.6, 10988.0], [34.7, 10988.0], [34.8, 10989.0], [34.9, 10989.0], [35.0, 10998.0], [35.1, 10998.0], [35.2, 10999.0], [35.3, 10999.0], [35.4, 10999.0], [35.5, 10999.0], [35.6, 11000.0], [35.7, 11000.0], [35.8, 11002.0], [35.9, 11002.0], [36.0, 11004.0], [36.1, 11004.0], [36.2, 11008.0], [36.3, 11008.0], [36.4, 11012.0], [36.5, 11012.0], [36.6, 11013.0], [36.7, 11013.0], [36.8, 11013.0], [36.9, 11014.0], [37.0, 11014.0], [37.1, 11016.0], [37.2, 11016.0], [37.3, 11016.0], [37.4, 11016.0], [37.5, 11018.0], [37.6, 11018.0], [37.7, 11018.0], [37.8, 11018.0], [37.9, 11019.0], [38.0, 11019.0], [38.1, 11022.0], [38.2, 11022.0], [38.3, 11022.0], [38.4, 11022.0], [38.5, 11024.0], [38.6, 11024.0], [38.7, 11024.0], [38.8, 11024.0], [38.9, 11025.0], [39.0, 11025.0], [39.1, 11027.0], [39.2, 11027.0], [39.3, 11028.0], [39.4, 11028.0], [39.5, 11028.0], [39.6, 11028.0], [39.7, 11031.0], [39.8, 11031.0], [39.9, 11031.0], [40.0, 11031.0], [40.1, 11033.0], [40.2, 11033.0], [40.3, 11035.0], [40.4, 11035.0], [40.5, 11037.0], [40.6, 11037.0], [40.7, 11038.0], [40.8, 11038.0], [40.9, 11039.0], [41.0, 11039.0], [41.1, 11040.0], [41.2, 11040.0], [41.3, 11040.0], [41.4, 11040.0], [41.5, 11043.0], [41.6, 11043.0], [41.7, 11045.0], [41.8, 11045.0], [41.9, 11047.0], [42.0, 11047.0], [42.1, 11047.0], [42.2, 11047.0], [42.3, 11051.0], [42.4, 11051.0], [42.5, 11051.0], [42.6, 11051.0], [42.7, 11057.0], [42.8, 11057.0], [42.9, 11058.0], [43.0, 11058.0], [43.1, 11060.0], [43.2, 11060.0], [43.3, 11061.0], [43.4, 11061.0], [43.5, 11067.0], [43.6, 11067.0], [43.7, 11068.0], [43.8, 11068.0], [43.9, 11073.0], [44.0, 11073.0], [44.1, 11081.0], [44.2, 11081.0], [44.3, 11085.0], [44.4, 11085.0], [44.5, 11087.0], [44.6, 11087.0], [44.7, 11088.0], [44.8, 11088.0], [44.9, 11088.0], [45.0, 11088.0], [45.1, 11090.0], [45.2, 11090.0], [45.3, 11097.0], [45.4, 11097.0], [45.5, 11100.0], [45.6, 11100.0], [45.7, 11103.0], [45.8, 11103.0], [45.9, 11112.0], [46.0, 11112.0], [46.1, 11116.0], [46.2, 11116.0], [46.3, 11119.0], [46.4, 11119.0], [46.5, 11122.0], [46.6, 11122.0], [46.7, 11124.0], [46.8, 11124.0], [46.9, 11134.0], [47.0, 11134.0], [47.1, 11135.0], [47.2, 11135.0], [47.3, 11135.0], [47.4, 11135.0], [47.5, 11137.0], [47.6, 11137.0], [47.7, 11138.0], [47.8, 11138.0], [47.9, 11139.0], [48.0, 11139.0], [48.1, 11144.0], [48.2, 11144.0], [48.3, 11145.0], [48.4, 11145.0], [48.5, 11156.0], [48.6, 11156.0], [48.7, 11162.0], [48.8, 11162.0], [48.9, 11165.0], [49.0, 11165.0], [49.1, 11168.0], [49.2, 11168.0], [49.3, 11170.0], [49.4, 11170.0], [49.5, 11175.0], [49.6, 11175.0], [49.7, 11180.0], [49.8, 11180.0], [49.9, 11181.0], [50.0, 11181.0], [50.1, 11184.0], [50.2, 11184.0], [50.3, 11191.0], [50.4, 11191.0], [50.5, 11201.0], [50.6, 11201.0], [50.7, 11207.0], [50.8, 11207.0], [50.9, 11211.0], [51.0, 11211.0], [51.1, 11211.0], [51.2, 11211.0], [51.3, 11213.0], [51.4, 11213.0], [51.5, 11215.0], [51.6, 11215.0], [51.7, 11218.0], [51.8, 11218.0], [51.9, 11218.0], [52.0, 11218.0], [52.1, 11221.0], [52.2, 11221.0], [52.3, 11236.0], [52.4, 11236.0], [52.5, 11243.0], [52.6, 11243.0], [52.7, 11243.0], [52.8, 11243.0], [52.9, 11247.0], [53.0, 11247.0], [53.1, 11276.0], [53.2, 11276.0], [53.3, 11277.0], [53.4, 11277.0], [53.5, 11278.0], [53.6, 11278.0], [53.7, 11286.0], [53.8, 11286.0], [53.9, 11287.0], [54.0, 11287.0], [54.1, 11287.0], [54.2, 11287.0], [54.3, 11293.0], [54.4, 11293.0], [54.5, 11294.0], [54.6, 11294.0], [54.7, 11306.0], [54.8, 11306.0], [54.9, 11308.0], [55.0, 11308.0], [55.1, 11314.0], [55.2, 11314.0], [55.3, 11314.0], [55.4, 11314.0], [55.5, 11321.0], [55.6, 11321.0], [55.7, 11325.0], [55.8, 11325.0], [55.9, 11332.0], [56.0, 11332.0], [56.1, 11333.0], [56.2, 11333.0], [56.3, 11333.0], [56.4, 11333.0], [56.5, 11337.0], [56.6, 11337.0], [56.7, 11346.0], [56.8, 11346.0], [56.9, 11352.0], [57.0, 11352.0], [57.1, 11355.0], [57.2, 11355.0], [57.3, 11359.0], [57.4, 11359.0], [57.5, 11365.0], [57.6, 11365.0], [57.7, 11419.0], [57.8, 11419.0], [57.9, 11442.0], [58.0, 11442.0], [58.1, 11447.0], [58.2, 11447.0], [58.3, 11450.0], [58.4, 11450.0], [58.5, 11459.0], [58.6, 11459.0], [58.7, 11459.0], [58.8, 11459.0], [58.9, 11465.0], [59.0, 11465.0], [59.1, 11472.0], [59.2, 11472.0], [59.3, 11475.0], [59.4, 11475.0], [59.5, 11476.0], [59.6, 11476.0], [59.7, 11486.0], [59.8, 11486.0], [59.9, 11493.0], [60.0, 11493.0], [60.1, 11497.0], [60.2, 11497.0], [60.3, 11567.0], [60.4, 11567.0], [60.5, 11594.0], [60.6, 11594.0], [60.7, 11603.0], [60.8, 11603.0], [60.9, 11624.0], [61.0, 11624.0], [61.1, 11634.0], [61.2, 11634.0], [61.3, 11635.0], [61.4, 11635.0], [61.5, 11642.0], [61.6, 11642.0], [61.7, 11652.0], [61.8, 11652.0], [61.9, 11659.0], [62.0, 11659.0], [62.1, 11701.0], [62.2, 11701.0], [62.3, 11701.0], [62.4, 11701.0], [62.5, 11711.0], [62.6, 11711.0], [62.7, 11744.0], [62.8, 11744.0], [62.9, 11748.0], [63.0, 11748.0], [63.1, 11755.0], [63.2, 11755.0], [63.3, 11763.0], [63.4, 11763.0], [63.5, 11771.0], [63.6, 11771.0], [63.7, 11776.0], [63.8, 11776.0], [63.9, 11776.0], [64.0, 11776.0], [64.1, 11811.0], [64.2, 11811.0], [64.3, 11826.0], [64.4, 11826.0], [64.5, 11829.0], [64.6, 11829.0], [64.7, 11833.0], [64.8, 11833.0], [64.9, 11844.0], [65.0, 11844.0], [65.1, 11862.0], [65.2, 11862.0], [65.3, 11875.0], [65.4, 11875.0], [65.5, 11881.0], [65.6, 11881.0], [65.7, 11938.0], [65.8, 11938.0], [65.9, 11940.0], [66.0, 11940.0], [66.1, 11948.0], [66.2, 11948.0], [66.3, 11962.0], [66.4, 11962.0], [66.5, 11969.0], [66.6, 11969.0], [66.7, 11969.0], [66.8, 11969.0], [66.9, 11973.0], [67.0, 11973.0], [67.1, 11982.0], [67.2, 11982.0], [67.3, 11986.0], [67.4, 11986.0], [67.5, 11997.0], [67.6, 11997.0], [67.7, 11998.0], [67.8, 11998.0], [67.9, 11999.0], [68.0, 11999.0], [68.1, 12000.0], [68.2, 12000.0], [68.3, 12012.0], [68.4, 12012.0], [68.5, 12014.0], [68.6, 12014.0], [68.7, 12021.0], [68.8, 12021.0], [68.9, 12052.0], [69.0, 12052.0], [69.1, 12068.0], [69.2, 12068.0], [69.3, 12610.0], [69.4, 12610.0], [69.5, 12839.0], [69.6, 12839.0], [69.7, 12942.0], [69.8, 12942.0], [69.9, 13037.0], [70.0, 13037.0], [70.1, 13082.0], [70.2, 13082.0], [70.3, 13253.0], [70.4, 13253.0], [70.5, 13501.0], [70.6, 13501.0], [70.7, 14077.0], [70.8, 14077.0], [70.9, 14350.0], [71.0, 14350.0], [71.1, 14958.0], [71.2, 14958.0], [71.3, 14965.0], [71.4, 14965.0], [71.5, 15045.0], [71.6, 15045.0], [71.7, 15143.0], [71.8, 15143.0], [71.9, 15146.0], [72.0, 15146.0], [72.1, 15209.0], [72.2, 15209.0], [72.3, 15305.0], [72.4, 15305.0], [72.5, 15307.0], [72.6, 15307.0], [72.7, 15339.0], [72.8, 15339.0], [72.9, 15376.0], [73.0, 15376.0], [73.1, 15502.0], [73.2, 15502.0], [73.3, 15506.0], [73.4, 15506.0], [73.5, 15525.0], [73.6, 15525.0], [73.7, 15538.0], [73.8, 15538.0], [73.9, 15543.0], [74.0, 15543.0], [74.1, 15545.0], [74.2, 15545.0], [74.3, 15571.0], [74.4, 15571.0], [74.5, 15572.0], [74.6, 15572.0], [74.7, 15573.0], [74.8, 15573.0], [74.9, 15579.0], [75.0, 15579.0], [75.1, 15581.0], [75.2, 15581.0], [75.3, 15587.0], [75.4, 15587.0], [75.5, 15607.0], [75.6, 15607.0], [75.7, 15634.0], [75.8, 15634.0], [75.9, 15636.0], [76.0, 15636.0], [76.1, 15645.0], [76.2, 15645.0], [76.3, 15673.0], [76.4, 15673.0], [76.5, 15677.0], [76.6, 15677.0], [76.7, 15686.0], [76.8, 15686.0], [76.9, 15687.0], [77.0, 15687.0], [77.1, 15692.0], [77.2, 15692.0], [77.3, 15721.0], [77.4, 15721.0], [77.5, 15745.0], [77.6, 15745.0], [77.7, 15780.0], [77.8, 15780.0], [77.9, 15820.0], [78.0, 15820.0], [78.1, 15823.0], [78.2, 15823.0], [78.3, 15836.0], [78.4, 15836.0], [78.5, 15838.0], [78.6, 15838.0], [78.7, 15844.0], [78.8, 15844.0], [78.9, 15846.0], [79.0, 15846.0], [79.1, 15849.0], [79.2, 15849.0], [79.3, 15851.0], [79.4, 15851.0], [79.5, 15852.0], [79.6, 15852.0], [79.7, 15860.0], [79.8, 15860.0], [79.9, 15865.0], [80.0, 15865.0], [80.1, 15868.0], [80.2, 15868.0], [80.3, 15884.0], [80.4, 15884.0], [80.5, 15943.0], [80.6, 15943.0], [80.7, 15971.0], [80.8, 15971.0], [80.9, 15973.0], [81.0, 15973.0], [81.1, 15977.0], [81.2, 15977.0], [81.3, 16082.0], [81.4, 16082.0], [81.5, 16084.0], [81.6, 16084.0], [81.7, 16088.0], [81.8, 16088.0], [81.9, 16122.0], [82.0, 16122.0], [82.1, 16857.0], [82.2, 16857.0], [82.3, 16972.0], [82.4, 16972.0], [82.5, 17034.0], [82.6, 17034.0], [82.7, 17035.0], [82.8, 17035.0], [82.9, 17565.0], [83.0, 17565.0], [83.1, 17590.0], [83.2, 17590.0], [83.3, 18986.0], [83.4, 18986.0], [83.5, 19334.0], [83.6, 19334.0], [83.7, 19428.0], [83.8, 19428.0], [83.9, 19444.0], [84.0, 19444.0], [84.1, 19491.0], [84.2, 19491.0], [84.3, 19524.0], [84.4, 19524.0], [84.5, 19530.0], [84.6, 19530.0], [84.7, 19543.0], [84.8, 19543.0], [84.9, 19606.0], [85.0, 19606.0], [85.1, 19613.0], [85.2, 19613.0], [85.3, 19627.0], [85.4, 19627.0], [85.5, 19654.0], [85.6, 19654.0], [85.7, 19656.0], [85.8, 19656.0], [85.9, 19673.0], [86.0, 19673.0], [86.1, 19677.0], [86.2, 19677.0], [86.3, 19678.0], [86.4, 19678.0], [86.5, 19732.0], [86.6, 19732.0], [86.7, 19741.0], [86.8, 19741.0], [86.9, 19741.0], [87.0, 19741.0], [87.1, 19775.0], [87.2, 19775.0], [87.3, 19804.0], [87.4, 19804.0], [87.5, 19845.0], [87.6, 19845.0], [87.7, 19876.0], [87.8, 19876.0], [87.9, 19895.0], [88.0, 19895.0], [88.1, 19967.0], [88.2, 19967.0], [88.3, 19968.0], [88.4, 19968.0], [88.5, 19986.0], [88.6, 19986.0], [88.7, 19987.0], [88.8, 19987.0], [88.9, 19994.0], [89.0, 19994.0], [89.1, 19996.0], [89.2, 19996.0], [89.3, 20015.0], [89.4, 20015.0], [89.5, 20019.0], [89.6, 20019.0], [89.7, 20020.0], [89.8, 20020.0], [89.9, 20031.0], [90.0, 20031.0], [90.1, 20032.0], [90.2, 20032.0], [90.3, 20032.0], [90.4, 20032.0], [90.5, 20032.0], [90.6, 20032.0], [90.7, 20039.0], [90.8, 20039.0], [90.9, 20060.0], [91.0, 20060.0], [91.1, 20060.0], [91.2, 20060.0], [91.3, 20074.0], [91.4, 20074.0], [91.5, 20650.0], [91.6, 20650.0], [91.7, 20667.0], [91.8, 20667.0], [91.9, 20727.0], [92.0, 20727.0], [92.1, 20754.0], [92.2, 20754.0], [92.3, 20760.0], [92.4, 20760.0], [92.5, 20772.0], [92.6, 20772.0], [92.7, 20779.0], [92.8, 20779.0], [92.9, 20817.0], [93.0, 20817.0], [93.1, 20831.0], [93.2, 20831.0], [93.3, 20887.0], [93.4, 20887.0], [93.5, 20977.0], [93.6, 20977.0], [93.7, 20978.0], [93.8, 20978.0], [93.9, 20979.0], [94.0, 20979.0], [94.1, 20981.0], [94.2, 20981.0], [94.3, 20989.0], [94.4, 20989.0], [94.5, 21009.0], [94.6, 21009.0], [94.7, 21030.0], [94.8, 21030.0], [94.9, 21119.0], [95.0, 21119.0], [95.1, 21279.0], [95.2, 21279.0], [95.3, 21359.0], [95.4, 21359.0], [95.5, 23754.0], [95.6, 23754.0], [95.7, 24242.0], [95.8, 24242.0], [95.9, 24264.0], [96.0, 24264.0], [96.1, 24266.0], [96.2, 24266.0], [96.3, 24380.0], [96.4, 24380.0], [96.5, 24390.0], [96.6, 24390.0], [96.7, 24394.0], [96.8, 24394.0], [96.9, 24512.0], [97.0, 24512.0], [97.1, 25131.0], [97.2, 25131.0], [97.3, 25466.0], [97.4, 25466.0], [97.5, 26630.0], [97.6, 26630.0], [97.7, 26675.0], [97.8, 26675.0], [97.9, 26690.0], [98.0, 26690.0], [98.1, 26691.0], [98.2, 26691.0], [98.3, 26694.0], [98.4, 26694.0], [98.5, 26757.0], [98.6, 26757.0], [98.7, 26800.0], [98.8, 26800.0], [98.9, 26962.0], [99.0, 26962.0], [99.1, 26962.0], [99.2, 26962.0], [99.3, 26973.0], [99.4, 26973.0], [99.5, 26975.0], [99.6, 26975.0], [99.7, 28341.0], [99.8, 28341.0], [99.9, 29408.0], [100.0, 29408.0]], "isOverall": false, "label": "login Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 115.0, "series": [{"data": [[600.0, 11.0], [700.0, 26.0], [800.0, 9.0], [900.0, 67.0], [1000.0, 23.0], [4000.0, 1.0], [1100.0, 18.0], [4600.0, 2.0], [1200.0, 115.0], [4800.0, 2.0], [300.0, 6.0], [1300.0, 89.0], [1400.0, 14.0], [1500.0, 20.0], [400.0, 1.0], [1600.0, 19.0], [1700.0, 56.0], [1800.0, 5.0], [1900.0, 2.0], [500.0, 14.0]], "isOverall": false, "label": "create  bookingRequest", "isController": false}, {"data": [[600.0, 19.0], [700.0, 8.0], [800.0, 22.0], [900.0, 32.0], [1000.0, 22.0], [1100.0, 34.0], [1200.0, 86.0], [1300.0, 71.0], [1400.0, 35.0], [1500.0, 19.0], [1600.0, 51.0], [1700.0, 23.0], [3000.0, 1.0], [3700.0, 4.0], [3600.0, 2.0], [3800.0, 1.0], [3900.0, 1.0], [4200.0, 1.0], [4100.0, 1.0], [4600.0, 1.0], [4400.0, 2.0], [300.0, 11.0], [5500.0, 7.0], [5400.0, 5.0], [5600.0, 6.0], [400.0, 3.0], [500.0, 32.0]], "isOverall": false, "label": "get booking Request", "isController": false}, {"data": [[9700.0, 28.0], [9600.0, 29.0], [9500.0, 5.0], [9400.0, 1.0], [9800.0, 5.0], [9900.0, 47.0], [10000.0, 1.0], [10200.0, 1.0], [10600.0, 4.0], [10700.0, 9.0], [10500.0, 3.0], [10800.0, 25.0], [10900.0, 20.0], [11000.0, 49.0], [11100.0, 25.0], [11200.0, 21.0], [11300.0, 15.0], [11400.0, 13.0], [11700.0, 10.0], [11500.0, 2.0], [11600.0, 7.0], [11900.0, 12.0], [11800.0, 8.0], [12000.0, 6.0], [12600.0, 1.0], [13000.0, 2.0], [12800.0, 1.0], [13200.0, 1.0], [12900.0, 1.0], [13500.0, 1.0], [14300.0, 1.0], [14000.0, 1.0], [15300.0, 4.0], [14900.0, 2.0], [15200.0, 1.0], [15100.0, 2.0], [15000.0, 1.0], [15500.0, 12.0], [15600.0, 9.0], [15700.0, 3.0], [15800.0, 13.0], [15900.0, 4.0], [16000.0, 3.0], [16100.0, 1.0], [16900.0, 1.0], [16800.0, 1.0], [17000.0, 2.0], [17500.0, 2.0], [18900.0, 1.0], [19300.0, 1.0], [19400.0, 3.0], [19600.0, 8.0], [19800.0, 4.0], [19500.0, 3.0], [19900.0, 6.0], [19700.0, 4.0], [20000.0, 11.0], [21000.0, 2.0], [20600.0, 2.0], [20900.0, 5.0], [20700.0, 5.0], [20800.0, 3.0], [21100.0, 1.0], [21300.0, 1.0], [21200.0, 1.0], [23700.0, 1.0], [24300.0, 3.0], [24200.0, 3.0], [24500.0, 1.0], [25100.0, 1.0], [25400.0, 1.0], [26600.0, 5.0], [26900.0, 4.0], [26700.0, 1.0], [26800.0, 1.0], [28300.0, 1.0], [29400.0, 1.0]], "isOverall": false, "label": "login Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 29400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 21.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 747.0, "series": [{"data": [[0.0, 21.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 747.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 732.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 326.6986666666665, "minX": 1.73982354E12, "maxY": 326.6986666666665, "series": [{"data": [[1.73982354E12, 326.6986666666665]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73982354E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 377.0, "minX": 2.0, "maxY": 28874.5, "series": [{"data": [[2.0, 542.0], [7.0, 1103.0], [13.0, 1556.625], [14.0, 1559.0], [15.0, 1557.5], [17.0, 1484.5], [21.0, 686.0], [23.0, 588.8571428571429], [34.0, 699.0], [38.0, 665.0], [41.0, 667.0], [53.0, 566.0], [55.0, 582.3333333333334], [58.0, 553.0], [61.0, 549.6666666666666], [66.0, 553.0], [64.0, 552.0], [70.0, 517.0], [69.0, 540.0], [72.0, 529.0], [78.0, 396.0], [77.0, 395.0], [83.0, 903.0], [84.0, 1022.1034482758621], [99.0, 1115.5], [122.0, 1342.0], [131.0, 1299.0], [151.0, 966.5], [159.0, 2163.0], [167.0, 1206.0], [166.0, 1208.0], [165.0, 1210.0], [173.0, 1354.6666666666667], [172.0, 1363.1249999999998], [171.0, 1160.0], [170.0, 1162.0], [183.0, 4823.0], [182.0, 2152.666666666667], [181.0, 789.3333333333333], [190.0, 1058.5], [189.0, 1434.0], [185.0, 4662.0], [198.0, 1441.0], [220.0, 1359.0], [237.0, 1208.0], [252.0, 1276.0], [249.0, 1287.0], [319.0, 1387.0], [317.0, 1382.0], [316.0, 1382.0], [313.0, 1331.0], [314.0, 1334.0], [332.0, 1307.0], [331.0, 1310.5], [329.0, 1311.6666666666667], [328.0, 1309.0], [321.0, 1355.3333333333333], [350.0, 1392.5], [351.0, 1602.5], [349.0, 1416.0], [348.0, 1554.0], [347.0, 1453.6666666666667], [346.0, 1300.0], [345.0, 1338.0], [344.0, 1293.0], [341.0, 1310.0], [339.0, 1307.0], [340.0, 1306.0], [365.0, 1472.0], [361.0, 1284.0], [357.0, 1499.0], [356.0, 1424.857142857143], [355.0, 1857.0], [354.0, 1781.0], [353.0, 1302.0], [352.0, 1285.0], [381.0, 1499.5], [380.0, 1704.5], [383.0, 1768.0], [379.0, 1369.0], [376.0, 1672.0], [375.0, 1492.0], [369.0, 1606.5], [397.0, 1723.0], [399.0, 1703.0], [396.0, 1735.0], [387.0, 1735.3333333333333], [386.0, 1743.0], [385.0, 1745.7692307692307], [384.0, 1337.0], [395.0, 1727.0], [394.0, 1738.5], [393.0, 1725.0], [392.0, 1732.0], [391.0, 1748.5], [390.0, 1733.0], [389.0, 1743.0], [388.0, 1736.4285714285713], [407.0, 1633.3333333333333], [406.0, 1621.6666666666667], [405.0, 1623.5], [404.0, 1735.0], [446.0, 1612.0], [441.0, 1585.0], [440.0, 1636.0], [434.0, 1623.0], [462.0, 1586.0], [461.0, 1591.0], [460.0, 1587.0], [457.0, 1614.0], [455.0, 1562.0], [451.0, 1620.0], [479.0, 1058.5], [478.0, 1057.0], [476.0, 1269.5], [468.0, 1510.0], [466.0, 1510.0], [489.0, 983.0], [484.0, 992.0], [500.0, 1104.9631578947362]], "isOverall": false, "label": "create  bookingRequest", "isController": false}, {"data": [[341.82400000000024, 1265.647999999999]], "isOverall": false, "label": "create  bookingRequest-Aggregated", "isController": false}, {"data": [[2.0, 1164.0], [8.0, 1101.8], [10.0, 1102.0], [11.0, 1101.0], [12.0, 1100.0], [13.0, 1099.6666666666667], [15.0, 1566.5], [17.0, 1487.0], [20.0, 424.0], [21.0, 552.5], [23.0, 680.5], [24.0, 884.0], [26.0, 923.5], [30.0, 686.0], [32.0, 695.0], [34.0, 697.5], [36.0, 694.0], [38.0, 662.5], [41.0, 619.6666666666666], [43.0, 568.5], [46.0, 565.0], [49.0, 566.0], [53.0, 566.0], [52.0, 565.5], [55.0, 564.0], [54.0, 565.0], [56.0, 553.0], [58.0, 553.0], [61.0, 549.0], [60.0, 547.0], [66.0, 542.8], [70.0, 525.0], [69.0, 522.0], [72.0, 520.3333333333334], [78.0, 380.0], [77.0, 393.0], [83.0, 389.6666666666667], [82.0, 377.0], [81.0, 381.5], [80.0, 379.3333333333333], [87.0, 1304.0], [86.0, 1099.0], [85.0, 1101.0], [84.0, 958.0], [90.0, 1701.0], [88.0, 1310.0], [95.0, 5640.0], [94.0, 5572.0], [93.0, 5623.5], [92.0, 5674.0], [99.0, 5627.5], [98.0, 5555.0], [96.0, 5650.0], [102.0, 5428.0], [100.0, 5510.0], [106.0, 5471.0], [104.0, 5503.0], [111.0, 1433.0], [109.0, 1436.0], [108.0, 5506.0], [115.0, 1350.25], [119.0, 1269.5], [117.0, 1308.5], [122.0, 1342.0], [121.0, 1307.5], [126.0, 1320.0], [124.0, 1265.0], [135.0, 1170.6666666666667], [132.0, 1167.0], [131.0, 1328.3333333333333], [129.0, 1304.0], [138.0, 1165.6666666666667], [150.0, 951.0], [149.0, 954.0], [147.0, 961.0], [144.0, 956.0], [159.0, 4196.0], [158.0, 4495.0], [157.0, 4490.0], [156.0, 612.0], [155.0, 622.0], [154.0, 957.125], [167.0, 1203.0], [166.0, 1121.0], [165.0, 1209.0], [164.0, 1213.0], [163.0, 1130.0], [162.0, 1130.5], [160.0, 1132.0], [173.0, 1418.0], [172.0, 1313.0], [171.0, 2553.5], [169.0, 1329.0], [168.0, 1100.0], [183.0, 3855.0], [182.0, 808.0], [181.0, 3640.0], [179.0, 3731.166666666667], [190.0, 1409.0], [189.0, 1414.0], [188.0, 1425.0], [187.0, 1227.0], [186.0, 4613.0], [185.0, 1096.0], [184.0, 1409.0], [199.0, 1411.0], [198.0, 1420.0], [197.0, 1429.5], [195.0, 1416.5], [194.0, 1433.0], [192.0, 1430.0], [207.0, 1385.5], [205.0, 1384.0], [200.0, 1411.0], [215.0, 1379.5], [214.0, 1376.0], [213.0, 1381.0], [209.0, 1358.0], [208.0, 1386.0], [223.0, 1293.0], [222.0, 1277.0], [220.0, 1313.0], [219.0, 1367.0], [218.0, 1388.0], [216.0, 1354.6666666666667], [239.0, 1228.6666666666667], [238.0, 1207.0], [236.0, 1207.0], [235.0, 1240.0], [246.0, 1276.3333333333333], [245.0, 1251.0], [243.0, 1232.5], [241.0, 1224.6666666666667], [255.0, 1263.0], [252.0, 1278.5], [251.0, 1251.0], [250.0, 1274.75], [249.0, 1284.0], [266.0, 1254.6666666666667], [264.0, 1244.3333333333333], [263.0, 1253.0], [262.0, 1236.0], [259.0, 1254.5], [257.0, 1248.0], [256.0, 1284.0], [284.0, 1096.0], [281.0, 1095.0], [280.0, 1098.0], [277.0, 1095.8], [274.0, 1097.3333333333333], [272.0, 1090.5], [303.0, 869.3333333333334], [300.0, 885.0], [298.0, 824.3333333333334], [296.0, 826.0], [295.0, 856.0], [293.0, 835.0], [292.0, 784.0], [290.0, 785.5], [319.0, 1335.0], [317.0, 1334.0], [316.0, 1302.0], [314.0, 1176.5], [311.0, 1141.0], [307.0, 841.0], [306.0, 828.5], [304.0, 834.0], [332.0, 1302.0], [331.0, 1274.0], [329.0, 1302.0], [328.0, 1299.5], [326.0, 1258.0], [324.0, 1333.6666666666667], [321.0, 1325.0], [320.0, 1333.0], [349.0, 1307.0], [351.0, 1283.5], [348.0, 1292.0], [339.0, 1251.0], [338.0, 1242.0], [337.0, 1250.0], [347.0, 1289.0], [346.0, 1294.5], [345.0, 1295.0], [344.0, 1285.0], [341.0, 1295.0], [340.0, 1295.0], [355.0, 1283.0], [365.0, 1297.0], [366.0, 1777.0], [364.0, 1342.6666666666667], [362.0, 1382.0], [361.0, 1273.0], [358.0, 1308.0], [357.0, 1479.0], [356.0, 1282.0], [354.0, 1391.0], [352.0, 1280.0], [383.0, 1341.0], [380.0, 1356.0], [370.0, 1459.0], [369.0, 1463.0], [368.0, 1628.5], [379.0, 1655.0], [378.0, 1390.0], [377.0, 1359.0], [376.0, 1370.0], [375.0, 1379.5], [374.0, 1415.0], [372.0, 1295.0], [397.0, 1739.0], [399.0, 1729.6666666666667], [396.0, 1750.0], [386.0, 1776.0], [385.0, 1362.0], [384.0, 1490.5], [395.0, 1755.0], [393.0, 1771.0], [392.0, 1772.0], [391.0, 1767.0], [390.0, 1778.0], [388.0, 1776.0], [407.0, 1638.0], [404.0, 1739.8], [431.0, 1615.0], [428.0, 1619.2], [418.0, 1632.0], [417.0, 1635.0], [416.0, 1642.8], [446.0, 1631.0], [444.0, 1611.75], [440.0, 1618.3333333333333], [438.0, 1641.0], [436.0, 1637.0], [435.0, 1624.0], [434.0, 1614.0], [462.0, 1566.5], [461.0, 1598.0], [460.0, 1596.5], [457.0, 1583.5], [455.0, 1610.5], [453.0, 1614.0], [451.0, 1600.0], [449.0, 1630.3333333333333], [479.0, 1054.5], [478.0, 1062.0], [476.0, 1489.0], [474.0, 1489.0], [471.0, 1498.0], [470.0, 1508.0], [468.0, 1511.0], [467.0, 1516.0], [465.0, 1509.0], [489.0, 992.75], [487.0, 1005.5], [485.0, 995.5], [484.0, 1001.5], [500.0, 896.0909090909091]], "isOverall": false, "label": "get booking Request", "isController": false}, {"data": [[252.55600000000007, 1431.6060000000011]], "isOverall": false, "label": "get booking Request-Aggregated", "isController": false}, {"data": [[66.0, 21279.0], [72.0, 21359.0], [83.0, 20817.0], [80.0, 21119.0], [87.0, 19601.75], [86.0, 19761.999999999996], [85.0, 20039.0], [84.0, 20396.22580645161], [91.0, 18986.0], [156.0, 17577.5], [173.0, 16914.5], [172.0, 17034.5], [183.0, 16065.75], [182.0, 15943.0], [190.0, 15143.375], [188.0, 15623.75], [187.0, 15738.0], [186.0, 15677.814814814814], [185.0, 15490.0], [184.0, 15921.833333333332], [13.0, 28874.5], [15.0, 26800.81818181818], [263.0, 14350.0], [257.0, 14077.0], [293.0, 13501.0], [19.0, 25466.0], [349.0, 13037.0], [366.0, 12942.0], [22.0, 25131.0], [375.0, 12610.0], [368.0, 13253.0], [23.0, 24275.250000000004], [390.0, 13082.0], [387.0, 12839.0], [500.0, 10737.095375722538]], "isOverall": false, "label": "login Request", "isController": false}, {"data": [[385.71599999999967, 13251.077999999996]], "isOverall": false, "label": "login Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7166.666666666667, "minX": 1.73982354E12, "maxY": 22025.266666666666, "series": [{"data": [[1.73982354E12, 22025.266666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73982354E12, 7166.666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73982354E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1265.647999999999, "minX": 1.73982354E12, "maxY": 13251.077999999996, "series": [{"data": [[1.73982354E12, 1265.647999999999]], "isOverall": false, "label": "create  bookingRequest", "isController": false}, {"data": [[1.73982354E12, 1431.6060000000011]], "isOverall": false, "label": "get booking Request", "isController": false}, {"data": [[1.73982354E12, 13251.077999999996]], "isOverall": false, "label": "login Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73982354E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1265.6079999999988, "minX": 1.73982354E12, "maxY": 13248.838000000009, "series": [{"data": [[1.73982354E12, 1265.6079999999988]], "isOverall": false, "label": "create  bookingRequest", "isController": false}, {"data": [[1.73982354E12, 1431.5659999999991]], "isOverall": false, "label": "get booking Request", "isController": false}, {"data": [[1.73982354E12, 13248.838000000009]], "isOverall": false, "label": "login Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73982354E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73982354E12, "maxY": 12152.419999999995, "series": [{"data": [[1.73982354E12, 0.0]], "isOverall": false, "label": "create  bookingRequest", "isController": false}, {"data": [[1.73982354E12, 0.0]], "isOverall": false, "label": "get booking Request", "isController": false}, {"data": [[1.73982354E12, 12152.419999999995]], "isOverall": false, "label": "login Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73982354E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 377.0, "minX": 1.73982354E12, "maxY": 29408.0, "series": [{"data": [[1.73982354E12, 29408.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73982354E12, 377.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73982354E12, 13077.500000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73982354E12, 25124.810000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73982354E12, 1470.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.73982354E12, 19612.65]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73982354E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 542.0, "minX": 1.0, "maxY": 24264.0, "series": [{"data": [[2.0, 14054.5], [11.0, 24264.0], [3.0, 884.0], [205.0, 1594.0], [13.0, 1102.0], [54.0, 15571.5], [14.0, 1559.0], [250.0, 1369.0], [1.0, 542.0], [71.0, 1310.0], [18.0, 686.5], [79.0, 1367.0], [5.0, 10282.0], [20.0, 19620.0], [337.0, 10844.0], [102.0, 1263.5], [26.0, 4516.5], [27.0, 19987.0], [114.0, 9774.0], [120.0, 956.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 337.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 542.0, "minX": 1.0, "maxY": 24264.0, "series": [{"data": [[2.0, 14054.5], [11.0, 24264.0], [3.0, 884.0], [205.0, 1594.0], [13.0, 1102.0], [54.0, 15571.5], [14.0, 1559.0], [250.0, 1369.0], [1.0, 542.0], [71.0, 1310.0], [18.0, 686.5], [79.0, 1367.0], [5.0, 10282.0], [20.0, 19620.0], [337.0, 10844.0], [102.0, 1263.5], [26.0, 4516.5], [27.0, 19987.0], [114.0, 9771.5], [120.0, 956.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 337.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.73982348E12, "maxY": 16.666666666666668, "series": [{"data": [[1.73982354E12, 16.666666666666668], [1.73982348E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73982354E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.73982354E12, "maxY": 25.0, "series": [{"data": [[1.73982354E12, 25.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73982354E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.73982354E12, "maxY": 8.333333333333334, "series": [{"data": [[1.73982354E12, 8.333333333333334]], "isOverall": false, "label": "create  bookingRequest-success", "isController": false}, {"data": [[1.73982354E12, 8.333333333333334]], "isOverall": false, "label": "login Request-success", "isController": false}, {"data": [[1.73982354E12, 8.333333333333334]], "isOverall": false, "label": "get booking Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73982354E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.73982354E12, "maxY": 25.0, "series": [{"data": [[1.73982354E12, 25.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73982354E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

